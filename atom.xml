<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>JoinBase</title>
	<subtitle>JoinBase, a single-binary AIoT-first data-service platform.</subtitle>
	<link href="https://joinbase.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://joinbase.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-03-06T12:00:00+00:00</updated>
	<id>https://joinbase.io/atom.xml</id>
	<entry xml:lang="en">
		<title>JoinBase Tips Series #3: Importing CSV Datasets into JoinBase</title>
		<published>2023-03-06T12:00:00+00:00</published>
		<updated>2023-03-06T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/tips-csv/" type="text/html"/>
		<id>https://joinbase.io/blog/tips-csv/</id>
		<content type="html">&lt;p&gt;Before reading this article, it is recommended to read our previous Tips series to help you better understand:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;blog&#x2F;tips-1&#x2F;&quot;&gt;JoinBase Tips Series #1: Quick Start JoinBase&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;blog&#x2F;tips-2&#x2F;&quot;&gt;JoinBase Tips Series #2: Using HTTP Interface in JoinBase&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;basic-knowledge&quot;&gt;Basic knowledge&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;what-is-csv&quot;&gt;What is CSV?&lt;&#x2F;h3&gt;
&lt;p&gt;The full name of csv is Comma-Separated Values, which is a comma-separated value file format, also known as character-separated value, and is a plain text file used to store data. The csv file is composed of any number of records, one row is a row of the data table, and the fields of the generated data table are separated by half-width commas, and the file stores the tabular data (numbers and texts) in plain text. Plain text means that the file is a sequence of characters and contains no data that must be interpreted like binary numbers .&lt;&#x2F;p&gt;
&lt;h1 id=&quot;import-csv-dataset&quot;&gt;Import CSV dataset&lt;&#x2F;h1&gt;
&lt;p&gt;First, we prepare the CSV data file. In this test, the author manually created 2 CSV files (see the figure below), and friends can also choose to import different CSV data sets.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;test1.png&quot; alt=&quot;test1&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;test2.png&quot; alt=&quot;test2&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After preparing the CSV file, put the file into an empty folder so that JoinBase can read the data.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we follow the teaching of the previous article, log in the user, create a database, and create a table.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;psql.png&quot; alt=&quot;psql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;create.png&quot; alt=&quot;create&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Query table t and find that there is no data in the table.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;select.png&quot; alt=&quot;select&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now start importing CSV data, press Ctrl+D to exit, use base import to import, and enter the following command to see how to use it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;base data import --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;help.png&quot; alt=&quot;help&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You can see that the parameters that must be entered in the command are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The directory where the CSV file is locatedsurfaceuser&lt;&#x2F;li&gt;
&lt;li&gt;table&lt;&#x2F;li&gt;
&lt;li&gt;user&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Other parameters will have default values. For example, the database defaults to default. If you want to modify other parameters, you can add them to the command.&lt;&#x2F;p&gt;
&lt;p&gt;Enter the command to import the CSV dataset.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;base data import --input-url &amp;lt;INPUT_URL&amp;gt; --table &amp;lt;TABLE&amp;gt; --username &amp;lt;USERNAME&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;import.png&quot; alt=&quot;import&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;When you see the results shown in the figure, it proves that the import was successful.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, let&#x27;s see the effect of importing CSV into JoinBase, logging in users, and querying table t.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_csv&#x2F;result.png&quot; alt=&quot;result&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
As you can see, the CSV dataset was successfully imported into JoinBase!
&lt;h1 id=&quot;and-one-more-thing&quot;&gt;And one more thing&lt;&#x2F;h1&gt;
&lt;p&gt;The CSV import feature of this article was introduced in JoinBase 2023.03, but at the time of writing, we have not officially released JoinBase 2023.03. In order to encourage more interested users to participate in the community, we provide the weekly integration release in the &lt;a href=&quot;&#x2F;community&quot;&gt;kinds of communities&lt;&#x2F;a&gt;. Join us!&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase provides a lot of value beyond the peers of this era. We sincerely invite more users to join our community. JoinBase can help you!&lt;&#x2F;p&gt;
&lt;p&gt;Download JoinBase: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;products&#x2F;&quot;&gt;Download&lt;&#x2F;a&gt; the full-featured version of JoinBase and SmartBase for free now , so that your AIoT digital capabilities will be one step ahead.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Global Community: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;community&#x2F;&quot;&gt;Github Global Community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Chinese Community: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;community&#x2F;&quot;&gt;WeChat Group&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Discord Server: &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;sqX6vfnURj&quot;&gt;Discord Server&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JoinBase Tips Series #2: Using HTTP Interface in JoinBase</title>
		<published>2023-02-23T12:00:00+00:00</published>
		<updated>2023-03-03T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/tips-2/" type="text/html"/>
		<id>https://joinbase.io/blog/tips-2/</id>
		<content type="html">&lt;p&gt;Among the existing databases, there are very few databases that can natively support the HTTP interface. This brings up a problem: If users want to provide REST services based on these databases, they need to combine other HTTP services on top of the existing databases. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;basic-knowledge&quot;&gt;Basic knowledge&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;http-api&quot;&gt;HTTP API&lt;&#x2F;h3&gt;
&lt;p&gt;First introduce the concept of API, Application Programming Interface (application programming interface) is its full name. The simple understanding is that API is an interface. So what kind of interface is it? Now we often regard it as an HTTP interface, that is, HTTP API. That is to say, this interface has to be called through HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;Say we have an application that allows us to view, create, edit and delete widgets, we can create HTTP APIs that allow us to perform these functions.&lt;&#x2F;p&gt;
&lt;p&gt;But what&#x27;s the inconvenience of doing this? This way of writing the API has a disadvantage, that is, there is no unified style, which will cause other people who use our interface to have to refer to the API to know how it works.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t worry, REST will solve this problem for us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-rest&quot;&gt;What is REST?&lt;&#x2F;h3&gt;
&lt;p&gt;With the above introduction, you may also have an intuitive understanding. To put it bluntly, &lt;strong&gt;REST is a style!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The role of REST is to directly map the view (view), create (create), edit (edit) and delete (delete) we mentioned above to the &lt;strong&gt;GET, POST, PUT and DELETE&lt;&#x2F;strong&gt; methods that have been implemented in HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;After this change, the API becomes unified, and we only need to change the request method to complete related operations, which greatly simplifies the difficulty of understanding our interface and becomes easy to call.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;That&#x27;s what REST is all about!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;preparation&quot;&gt;Preparation&lt;&#x2F;h1&gt;
&lt;p&gt;The HTTP interface is JoinBase&#x27;s effort to facilitate the user&#x27;s end-to-end experience.&lt;&#x2F;p&gt;
&lt;p&gt;First, refer to our quick start tutorial, create a JoinBase account, and complete the operations in the article.&lt;&#x2F;p&gt;
&lt;p&gt;After you follow the above steps, simple data is inserted into JoinBase.&lt;&#x2F;p&gt;
&lt;p&gt;Also don&#x27;t forget to execute the following command to install curl, which is a prerequisite for us to use the HTTP interface.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo snap install curl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;use-the-http-interface&quot;&gt;Use the HTTP interface&lt;&#x2F;h1&gt;
&lt;p&gt;At this point, let&#x27;s experience the HTTP interface. This section will demonstrate a simple REST-based process for reading and writing.&lt;&#x2F;p&gt;
&lt;p&gt;Enter the above command to see our previous table creation&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_2&#x2F;table.png&quot; alt=&quot;table&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s change the way and enter the following command to view the previously created table using the HTTP interface&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;curl -s -H &amp;#39;X-JoinBase-User: tips&amp;#39; -H &amp;#39;X-JoinBase-Key: 123456&amp;#39; -X GET &amp;#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;?database=jb_tips&amp;#39; -d &amp;#39;desc table t&amp;#39;|json_pp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;got the answer:&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_2&#x2F;HTTP_table.png&quot; alt=&quot;HTTP_table&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Similarly, enter the following commands to use the HTTP interface to insert data into the database.&lt;&#x2F;p&gt;
&lt;p&gt;Now, we insert the data &amp;quot;3,4&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;curl -s -H &amp;#39;X-JoinBase-User: tips&amp;#39; -H &amp;#39;X-JoinBase-Key: 123456&amp;#39;  -X POST &amp;#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;jb_tips&#x2F;t&amp;#39; -d &amp;#39;3,4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s try query operations.&lt;&#x2F;p&gt;
&lt;p&gt;Execute the following commands to query.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;curl -s -H &amp;#39;X-JoinBase-User: tips&amp;#39; -H &amp;#39;X-JoinBase-Key: 123456&amp;#39; -X GET &amp;#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;?database=jb_tips&amp;#39; -d &amp;#39;select * from jb_tips.t&amp;#39;|json_pp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;note: &amp;quot;|json_pp&amp;quot; at the end of this command can help us &lt;strong&gt;see the query results more intuitively&lt;&#x2F;strong&gt; in the format of the json file . If not used, the query results will be presented in this form:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2},{&amp;quot;a&amp;quot;:3,&amp;quot;b&amp;quot;:4}]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the result of such a query is not intuitive.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, we should pay attention to adding when we want to see the query results; in addition, I believe some friends have also noticed that it is not used in the command to insert data, because we do not need to view it when inserting data.&lt;&#x2F;p&gt;
&lt;p&gt;After executing the previous command, the query result will be displayed in the following figure:&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_2&#x2F;result.png&quot; alt=&quot;result&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Obviously, compared with the other results, this query result is very clear and easy for beginners to understand.&lt;&#x2F;p&gt;
&lt;p&gt;Congratulations, you have a preliminary understanding of the basic operations of the HTTP interface in JoinBase!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;and-one-more-thing&quot;&gt;And one more thing&lt;&#x2F;h1&gt;
&lt;p&gt;JoinBase provides a lot of value beyond the peers of this era. We sincerely invite more users to join our community. JoinBase can help you!&lt;&#x2F;p&gt;
&lt;p&gt;Download JoinBase: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;products&#x2F;&quot;&gt;Download&lt;&#x2F;a&gt; the full-featured version of JoinBase and SmartBase for free now , so that your AIoT digital capabilities will be one step ahead.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Global Community: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;Github Global Community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Chinese Community: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;community&#x2F;&quot;&gt;WeChat Group&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Discord Server: &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;sqX6vfnURj&quot;&gt;Discord&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JoinBase Tips Series #1: Quick Start JoinBase</title>
		<published>2023-02-22T12:00:00+00:00</published>
		<updated>2023-03-02T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/tips-1/" type="text/html"/>
		<id>https://joinbase.io/blog/tips-1/</id>
		<content type="html">&lt;h1 id=&quot;get-joinbase&quot;&gt;Get JoinBase&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;operating-system&quot;&gt;Operating system&lt;&#x2F;h3&gt;
&lt;p&gt;Currently, JoinBase supports Linux distributions with modern kernels, such as the &lt;a href=&quot;https:&#x2F;&#x2F;releases-ubuntu-com.translate.goog&#x2F;20.04&#x2F;?_x_tr_sl=auto&amp;amp;_x_tr_tl=zh-CN&amp;amp;_x_tr_hl=zh-CN&quot;&gt;latest Ubuntu 20.04.4+ LTS&lt;&#x2F;a&gt; . ( &lt;a href=&quot;https:&#x2F;&#x2F;en-m-wikipedia-org.translate.goog&#x2F;wiki&#x2F;Windows_Subsystem_for_Linux?_x_tr_sl=auto&amp;amp;_x_tr_tl=zh-CN&amp;amp;_x_tr_hl=zh-CN&quot;&gt;Windows WSL2 with latest kernel&lt;&#x2F;a&gt; also works fine.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;processor&quot;&gt;Processor&lt;&#x2F;h3&gt;
&lt;p&gt;Supports mainstream 64-bit CPU architectures (X86-64, ARM, RISC-V) and supports everything from $6 ARMv8 SBCs to AWS 384 cores (z-series).&lt;&#x2F;p&gt;
&lt;p&gt;Currently, the x86-64v3 (AVX2+) version is available for public download. More downloads for other arch versions are coming soon.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;download&quot;&gt;Download&lt;&#x2F;h3&gt;
&lt;p&gt;Compared with the cumbersome installation process of other databases, the installation of JoinBase is very fast. Click &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;products&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; to download the free JoinBase.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;install&quot;&gt;Install&lt;&#x2F;h3&gt;
&lt;p&gt;Compared with the cumbersome installation process of other databases, JoinBase does not need to be installed: JoinBase is provided in the form of a compressed package, just unzip it to any directory on your machine, and run it in this directory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;install-client-console&quot;&gt;Install Client Console&lt;&#x2F;h3&gt;
&lt;p&gt;You should choose one client to manage JoinBase. We suggest using the most popular PostgreSQL protocol for starting. In Ubuntu, you can try the following commands to get PostgreSQL client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install postgresql-client
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JoinBase supports any PostgreSQL-compatible client and driver. For more information and use cases, please refer to: &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;postgresql&quot;&gt;PostgreSQL Interface&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configure-and-start-the-server&quot;&gt;Configure and start the server&lt;&#x2F;h1&gt;
&lt;p&gt;Before proceeding, you should change the following items in the conf file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;meta_dirs = [&amp;quot;path_to_your_meta_dir&amp;quot;] 
&lt;&#x2F;span&gt;&lt;span&gt;data_dirs = [&amp;quot;path_to_your_data_dir&amp;quot;] 
&lt;&#x2F;span&gt;&lt;span&gt;wal_dir = &amp;quot;path_to_your_wal_dir&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;log_dir = &amp;quot;path_to_your_log_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: If you do not change the path, the file will be saved to the default path.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After completing the above configuration, you can start the JoinBase server from the root directory of JoinBase in the following way:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;bash joinbase_start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you see the following content, JoinBase has started successfully!&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_1&#x2F;start.png&quot; alt=&quot;start&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;JoinBase started successfully&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;add-user&quot;&gt;Add user&lt;&#x2F;h1&gt;
&lt;p&gt;The JoinBase system follows the concept of a whitelist. Even if you have started the server, if you do not create an account, you can not use it.&lt;&#x2F;p&gt;
&lt;p&gt;So, in the next step you should add some users via our base_admin tool.&lt;&#x2F;p&gt;
&lt;p&gt;Create a user with username abc and password 123 using the following subcommand create_user:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;base_admin create_user abc 123       
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is recommended that you do not provide input in place of passwords. If no password is provided, the command will ask you to supply it without displaying it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;connect-to-joinbase&quot;&gt;Connect to JoinBase&lt;&#x2F;h1&gt;
&lt;p&gt;After setting up the abc user, you can log in as that user to connect to our PostgreSQL wire protocol compliant server.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;psql -h 127.0.0.1 -p 5433 -U abc  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JoinBase&#x27;s own language choice supports more intuitive MySQL-style management statements rather than PostgreSQL&#x27;s \startup commands, although JoinBase also supports the PostgreSQL client.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;create-table&quot;&gt;Create table&lt;&#x2F;h1&gt;
&lt;p&gt;This process is meaningless unless we have some tables to write data to or read data from.&lt;&#x2F;p&gt;
&lt;p&gt;The structure of the JoinBase table is directly mapped from the MQTT message. Through the mapping, the json payload of an MQTT message will be extracted and saved into the target table. See more information about MQTT message mapping in the MQTT messages page. &lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a database and a table to store data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;use abc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT EXISTS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;(a Nullable(UInt32),b Int64);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;test-query&quot;&gt;Test query&lt;&#x2F;h1&gt;
&lt;p&gt;We can now make test queries against the new table.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yes, there is no data queried in the new table t. Let&#x27;s inject sample data into the table.&lt;&#x2F;p&gt;
&lt;p&gt;You can use all provided interfaces to ingest data, such as HTTP interface, MQTT interface, and PostgreSQL interface.&lt;&#x2F;p&gt;
&lt;p&gt;This time we demonstrate the PostgreSQL interface. Regarding the use of other interfaces, you are welcome to pay attention to our follow-up articles, and we will introduce them in detail.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this way, the data is successfully inserted into the newly created table.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;carry-out-testing&quot;&gt;Carry out testing&lt;&#x2F;h1&gt;
&lt;p&gt;Returns the query that just got no results.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s try again.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;very good! When you see the following results, it means you have successfully completed the query.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tips_1&#x2F;query.png&quot; alt=&quot;query&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;result&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;go-further&quot;&gt;Go further&lt;&#x2F;h1&gt;
&lt;p&gt;A thousand miles begins with a single step. Congratulations on completing your first query on JoinBase!&lt;&#x2F;p&gt;
&lt;p&gt;Yes, compared to traditional databases or big data platforms, JoinBase is super easy to use!&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase provides a lot of value beyond the peers of this era. We sincerely invite more users to join our community. JoinBase can help you!&lt;&#x2F;p&gt;
&lt;p&gt;Download JoinBase: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;products&#x2F;&quot;&gt;Download&lt;&#x2F;a&gt; the full-featured version of JoinBase and SmartBase for free now , so that your AIoT digital capabilities will be one step ahead.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Global Community: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;Github Global Community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Chinese Community: &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;community&#x2F;&quot;&gt;WeChat Group&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase Discord Server: &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;sqX6vfnURj&quot;&gt;Discord&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At the same time, welcome to leave a message in the comment area. If you have any questions, we will answer them for you.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>TinyAnimal: Animal Recognition Practices on Grove Vision AI</title>
		<published>2023-02-20T12:00:00+00:00</published>
		<updated>2023-02-21T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/tinyanimal/" type="text/html"/>
		<id>https://joinbase.io/blog/tinyanimal/</id>
		<content type="html">&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;tinyanimal.jpg&quot; alt=&quot;tinyanimal&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;The wild without a reliable internet connection&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;story&quot;&gt;Story&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;p&gt;There are many projects focus on the hardware of edge AI&#x2F;ML. However, in real scenarios, there is no significant practice of learning details in software side on top of products to show, and this paper makes up for this deficiency.&lt;&#x2F;p&gt;
&lt;p&gt;At the same time, &lt;strong&gt;this project provides a complete and reproducible work flow of EdgeML&#x2F;TinyML for animal recognition on one cheap edge AI hardware&lt;&#x2F;strong&gt;, which is rare in existing projects as known.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h3&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;hardware.jpg&quot; alt=&quot;hardware&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Wio terminal and Grove AI Module in SenseCAP K1100 kit&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The project&#x27;s hardware is the Grove Vision AI Module in Seeed &lt;a href=&quot;https:&#x2F;&#x2F;www.seeedstudio.com&#x2F;Seeed-Studio-LoRaWAN-Dev-Kit-p-5370.html&quot;&gt;SenseCAP K1100&#x2F;A1100&lt;&#x2F;a&gt;. There is standalone version of &lt;a href=&quot;https:&#x2F;&#x2F;wiki.seeedstudio.com&#x2F;Grove-Vision-AI-Module&#x2F;&quot;&gt;Grove Vision AI Module&lt;&#x2F;a&gt; in the official store.&lt;&#x2F;p&gt;
&lt;p&gt;The Vision AI Module has a chip: Himax HX6537-A. The mcu on the chip is based on the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ARC_(processor)&quot;&gt;ARC&lt;&#x2F;a&gt; arch which is unfamiliar to consumers. The main frequence is 400Mhz which is also not high. But the most interesting that the HX6537-A, has fast &lt;a href=&quot;https:&#x2F;&#x2F;www.synopsys.com&#x2F;designware-ip&#x2F;technical-bulletin&#x2F;performance-coding-advantages.html&quot;&gt;XY SDRAM memory architecture to accelerate&lt;&#x2F;a&gt; the TinyML, like tensorflow lite model inferenece. We will see the performance of this chip later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;&#x2F;h3&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;workflow.jpg&quot; alt=&quot;workflow&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Workflow for TinyAnimal&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The above workflow is common and clear. We only discuss some interesting requirements:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The dataset is the public dataset with 9.6GB images.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This avoids the common problem of too few samples or insufficient representativeness.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;The training is completed locally.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This avoids the common problem of too few samples or insufficient representativeness.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;The data collection and realtime analysis is done via an edge database &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;&quot;&gt;JoinBase&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Unlike the common databases like PostgreSQL or TimescaleDB, the JoinBase accept the MQTT message directly. Unlike the cloud service, the JoinBase support run in the edge which can be used in an environment without a network. Finally, the JoinBase is free for the commerical use which is also nice for further development of the edge platform.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prepare-dataset&quot;&gt;Prepare Dataset&lt;&#x2F;h3&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;dataset.jpg&quot; alt=&quot;dataset&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Overall of &quot;animials-80&quot; dataset&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;At present, there is not much public research on the workedge AI for wildlifes or animals. One of the few publicly available animal datasets - &lt;a href=&quot;https:&#x2F;&#x2F;www.kaggle.com&#x2F;code&#x2F;majdikarim&#x2F;farm-animals-detection-yolov5&quot;&gt;Animals Detection Images Dataset&lt;&#x2F;a&gt; from Kaggle (called &amp;quot;animials-80&amp;quot; dataset ) has been used. It contains 80 animals in 9.6GB images, and should be great enough for common animal recognition task.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prepare-training-data&quot;&gt;Prepare Training Data&lt;&#x2F;h3&gt;
&lt;p&gt;The good thing of animals-80 dataset is that it has been labeled itself. But the original label format is not Yolov5 label format. A preparation work has been carried on it. The core part is the preprocessing function shown above. Please the later code repo for more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;train&quot;&gt;Train&lt;&#x2F;h3&gt;
&lt;p&gt;Because we don&#x27;t have enough resources to do a full training on full 9.6GB training. So, a picked subset of &lt;strong&gt;animials-80&lt;&#x2F;strong&gt; dataset has been choosen.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;15-animal Subset Training&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;15train.jpg&quot; alt=&quot;15train&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;15-animal subset training&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We use a 24c&#x2F;48T Xeon Platinum 8260 Processor to do the training using above the commands got from offical example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tom&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tom &quot;&gt;&lt;code class=&quot;language-tom&quot; data-lang=&quot;tom&quot;&gt;&lt;span&gt;python3 train.py --img 192 --batch 32 --epochs 200 --data data&#x2F;animal.yaml --cfg yolov5n6-xiao.yaml --weights yolov5n6-xiao.pt --name animals --cache --project runs&#x2F;train2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, after two hours (Yes, it proves again that &lt;strong&gt;Don&#x27;t use CPU to train&lt;&#x2F;strong&gt; even it is a top Xeon SP), the final recognition effect is found to be very poor.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main metrics are very low: the precision is 0.6, the recall and mAP_0.5 are just around 0.3.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In fact, this result is close to not working.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;4-animal Subset Training&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s reduce the types of recognized animals to four: spider, duck, magpie and butterfly, which of course are the most common animals in a suburban wild area.&lt;&#x2F;p&gt;
&lt;p&gt;Note, to re-run the preparing script to generate correct data&#x2F;animal.yaml.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;4train.jpg&quot; alt=&quot;4train&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;4-animal subset training&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;The main metrics become better: the precision is ~0.81, the recall and mAP_0.5 are around 0.6.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We will review the performance of this model in the late inference trials and evalutions. It is possible to do only a binary categorization: one animal and no animal. But in this project, I look forward to evaluating the recognition effect in more complex scenes.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;4-animal Subset Training by YoLov5Official Pretrain Model&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The above trainings are done by the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.seeedstudio.com&#x2F;Train-Deploy-AI-Model-A1101-Grove-Vision-AI&#x2F;&quot;&gt;Seeed&#x27;s official document&#x27;s recommend&lt;&#x2F;a&gt;. The pretrained model is yolov5n6-xiao which may lack good generalization ability. In this project, we try a YoLOv5 official smallest pretrained model yolov5n6 to see whether there is some difference.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;yolov5n6.jpg&quot; alt=&quot;yolov5n6&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;4-animal subset training with offical yolov5n6 model&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The above result is obtained from the official yolov5n6 model with epochs=150. The result is great. Because,&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main metrics: the precision, the recall and mAP_0, 5 are all larger than 0.9. In the ML, the difference in mAP_0.5 between 0.6 and 0.9 is huge and huge in real-world detection.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Unfortunately, the final model trained based on the official yolov5n6 is close to 4MB, while the Grove AI module has the constraint model size no more than 1MB. So, we can not make use of any such bigger models (tried). &lt;em&gt;&lt;strong&gt;Some suggestions will be discussed in the final section.Inference&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;3animals.jpg&quot; alt=&quot;3animals&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Three examples of detections in the simulation&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After the above traning, we do a picture based simulation to preliminarily evalute the effect of the model. Let&#x27;s see examples.&lt;&#x2F;p&gt;
&lt;p&gt;The above is the output of Grove AI module. The index of classification is in the middle and the confidence is around the side. The animal name of coressponding index can be seen in above training figures.&lt;&#x2F;p&gt;
&lt;p&gt;The first and second detection are right in a nice confidence and the third detection is wrong. The third picture shows a magpie fly in the sky and the inference result is the butterfly. We just see the impact of this classification model in the later real-wprld evalution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-world-evaluation&quot;&gt;Real-world Evaluation&lt;&#x2F;h3&gt;
&lt;p&gt;Inferencing in real world is more challenging than inferencing in laboratory. Because the environment or the status of the tester or the tested object under the test can all have a big impact on the results. That is why we are planning in the workflow section.&lt;&#x2F;p&gt;
&lt;p&gt;We have done a real-world evaluation via a country park wildlife survey in the &lt;a href=&quot;https:&#x2F;&#x2F;www.hackster.io&#x2F;surfeit&#x2F;tinywild-make-wild-iot-in-your-hand-729732&quot;&gt;project TinyWild&lt;&#x2F;a&gt;. Two types of detections are carried out:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Viewport (Moving Camera) Based Detection&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;result.png&quot; alt=&quot;result&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Classification statistics (with confidence &gt; 75) in the whole survey&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The above figure is the classification statistics (with confidence &amp;gt; 75) in the whole survey. There is a large time in which the camera is moving. So, this is a dynamic viewport (moving camera) based detection. &amp;quot;Unkown&amp;quot; and empty animal which stems from the software logics has been excluded here.&lt;&#x2F;p&gt;
&lt;p&gt;The basic conclusion is that, for individual identification, it is not particularly ideal, but the qualitative information collected is effective.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bufferfly is relatively outstanding in the statistics but without Magpie that&#x27;ve seen many times in the park.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This seems the Magpie are been recongized as the bufferfly as shown in the analysis of the Inference section above. What they have in common is that, they often flys in the air. &lt;strong&gt;Three real-world factors: moving camera, moving objects and low resolution, have a great impact on the recognition results.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Static Viewport (Static Camera) Based Detection&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To reduce impact of moving factors, a dedicated wild duck (mallard) observation in the lakeide has been carried out as well.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinyanimal&#x2F;duck_detection.gif&quot; alt=&quot;duck_detection&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Primary process of the static wild duck observation&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the above first of captures, the count of duck in our frontend UI (one of interesting in this is that the dynamic table in UI is driven by a SQL query, please see our more infos in future projects) is 10. Suddenly, two ducks swims into the scope of camera. The count of duck has been increased to 13. Considering the orignal duck is counted, the 13 is the exacting count at that moment. It is found that &lt;strong&gt;the Grove AI works greatly for nearby animal detection&lt;&#x2F;strong&gt; like we done in lakeside: we got three counts when suddenly three ducks swims into the scope of camera in a relative static positioning. (note: in the TinyWild project, we said there are four counts, but it should be corrected to three counts according to our recordings.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ideas&quot;&gt;Ideas&lt;&#x2F;h3&gt;
&lt;p&gt;Based on the above pratices, we give out the following suggestions for EdgeML or TinyML on a cheap edge AI hardware:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Try to observe statically&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;i.e. observers do not make large movements.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Detect as few objects as possible&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For example, only do the binary categorization: people or nobody, monkey or no monkey, bird or no bird.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;Make main metrics of model as large as possible&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For example, the precision &amp;gt; 0.8, the recall and mAP_0.5 &amp;gt; 0.6.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;strong&gt;Improve recognition accuracy as possible (like, longer training time)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The cheap edge ML hardware usally has the limited resources, for example, Grove AI module has the constraint model size no more than 1MB, which falls below the model size trained from the yolov5&#x27;s official yolov5n pre-trained network. The smaller model is found to significantly affect the model&#x27;s primary metrics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;yolov5-swift&quot;&gt;&lt;strong&gt;TinyAnimal &#x27;s modified yolov5-swift repo&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;tinywild&quot;&gt;&lt;strong&gt;TinyAnimal &#x27;s modified Wio Terminal firmware and related&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JoinBase&#x27;s 2023: Revolutionizing AIoT Data Services for the World</title>
		<published>2023-02-08T12:00:00+00:00</published>
		<updated>2023-02-06T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/joinbase-2023/" type="text/html"/>
		<id>https://joinbase.io/blog/joinbase-2023/</id>
		<content type="html">&lt;h3 id=&quot;tech-review-2022&quot;&gt;Tech Review 2022&lt;&#x2F;h3&gt;
&lt;p&gt;We are proud of all the innovations we have made for this era in 2022: We are significantly ahead of our competitors in the performance of implemented SQL primitives, particularly in only 4MB binary size. In 2023, we are adding new and more exciting AI infra into JoinBase. This makes the final binary size increased by 80% to 8MB.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;most-lightweight-and-fastest-data-platform-for-aiot&quot;&gt;Most lightweight and fastest data platform for AIoT&lt;&#x2F;h5&gt;
&lt;p&gt;Recently, we have re-run our &lt;a href=&quot;&#x2F;benchmark&quot;&gt;benchmark&lt;&#x2F;a&gt; against the latest ClickHouse&#x27;s stable version 22.9.7.34 (which is the last stable version in 2022). The primitive benchmark results have not changed (but some details should be added or tweaked). This is a true story that 8MB binary beats 410MB ClickHouse binary in large-scale time-series. It&#x27;s a triumph of modern performance engineering.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s recap JoinBase&#x27;s power:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Comparison&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;JoinBase 2023.1&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;ClickHouse 22.9.7.34&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;References&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;main binary size&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;～8MB&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;～410 MB&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;products&quot;&gt;Products Download&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;basic SQL analytics&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;average 3.5x - 3.75x faster&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1x baseline&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;benchmark&quot;&gt;Benchmark&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;IoT protocol interface&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;http-interface&#x2F;&quot;&gt;Blog: Multi-protocol Interfaces&lt;&#x2F;a&gt; &lt;br&#x2F;&gt; &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mqtt&#x2F;&quot;&gt;Doc: MQTT Interface&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;IoT gateway&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;joinbase-as-mqtt-broker&#x2F;&quot;&gt;JoinBase As MQTT Broker&lt;&#x2F;a&gt; &lt;br&#x2F;&gt; &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mqtt&#x2F;&quot;&gt;Doc: MQTT Interface&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;HTTP interface concurrent &lt;br&#x2F;&gt;read throughput&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;~100x higher (402k&#x2F;s)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1x baseline (4.3k&#x2F;s)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;http-interface&#x2F;&quot;&gt;Blog: Multi-protocol Interfaces&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;PG interface concurrent &lt;br&#x2F;&gt;read throughput&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;~130x higher (34k&#x2F;s)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1x baseline (245)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;benchmark&quot;&gt;Benchmark&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;sustained one-by-one MQTT message &lt;br&#x2F;&gt;write throughput&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;7 million msg&#x2F;s&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;benchmark&quot;&gt;Benchmark&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;sustained batch MQTT message &lt;br&#x2F;&gt;write throughput&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;25 million msg&#x2F;s &lt;br&#x2F;&gt; (NVME write bandwidth saturated!)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;benchmark&quot;&gt;Benchmark&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;sustained one-by-one and batch HTTP message &lt;br&#x2F;&gt;write throughput&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;on par with MQTT interface&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;low&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;internally tested, to be demonstrated&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;dedicated support to low-code&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;smartbase&#x2F;&quot;&gt;Blog: SmartBase&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;end-to-end platform&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;smartbase&#x2F;&quot;&gt;Blog: SmartBase&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt;Why you should use JoinBase&lt;p&#x2F;&gt;
&lt;p&gt;Of course, as a general analytical data warehouse, ClickHouse provides many functions that JoinBase does not have.  However, for AIoT, most of these functions are not must-have. JoinBase provides AIoT and time-series domain with new simple but efficient real-time paradigms through innovative designs, like auto views. (Watch &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;8&quot;&gt;issue#8&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;achievement-2022&quot;&gt;Achievement 2022&lt;&#x2F;h3&gt;
&lt;p&gt;In addition to above technological progresses, we have also made great achievements in products and users. &lt;&#x2F;p&gt;
&lt;p&gt;Since the global launch of JoinBase in October 2022, we have received overwhelming requests from totally 33 users applied our free distribution &lt;a href=&quot;&#x2F;request&quot;&gt;on the website&lt;&#x2F;a&gt;. We&#x27;re thrilled to see that some of these users are from big giants and give us much positive feedbacks. Some of them told me that they are using JoinBase in the daily development and even in production!&lt;&#x2F;p&gt;
&lt;p&gt;Because of these achievements, we decided to open the download from now on, to make the interaction flywheel between the product and the community faster. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;roadmap-2023&quot;&gt;Roadmap 2023&lt;&#x2F;h3&gt;
&lt;p&gt;We have already laid out our roadmap for the year (Watch &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;9&quot;&gt;issue#9&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;h5 id=&quot;more-supports-to-the-community&quot;&gt;More supports to the community&lt;&#x2F;h5&gt;
&lt;p&gt;JoinBase 2023 has added more supports to the community, making it easier for users to find the information and help they need. The platform has a strong community of AIoT engineers, database developers, and high-performance experts who are always on hand to assist users with their needs.&lt;&#x2F;p&gt;
&lt;p&gt;Like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;11&quot;&gt;issue#11&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;more-diverse-analytics-infrastructure&quot;&gt;More diverse analytics infrastructure&lt;&#x2F;h5&gt;
&lt;p&gt;JoinBase plans to add even more analysis functions in 2023 to enhance its offerings to customers. These new functions will make it easier to extract insights from your AIoT data and make real-time decisions. For example, sampling support.&lt;&#x2F;p&gt;
&lt;p&gt;Like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;16&quot;&gt;issue#16&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;fewer-concepts-to-use-it&quot;&gt;Fewer concepts to use it&lt;&#x2F;h5&gt;
&lt;p&gt;JoinBase has re-designed the workflow with simplicity in its core, requiring fewer concepts for users to fully utilize its capabilities. This makes it easy for users of all levels to access and use the platform&#x27;s data services, without the need for extensive training or technical know-how. &lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, in order to maximize performance, you need to understand the concept of partitioning. For most distributed databases, even single-node databases, you need to learn this concept if you want to achieve good performance. But as a new data platform, we think this can actually be improved. We plan to hide this concept for users recent 2023, and still provide top performance. This is just the issue about auto-partitioning.&lt;&#x2F;p&gt;
&lt;p&gt;Like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;7&quot;&gt;issue#7&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h5 id=&quot;brand-new-ai-infrastructure&quot;&gt;Brand new AI infrastructure&lt;&#x2F;h5&gt;
&lt;p&gt;Recently, the popularity of ChatGPT has shown the impact of AI-based evolution on the world. JoinBase also wants to showcase our thoughts and works about AI. That is the &lt;b&gt;&amp;quot;A&amp;quot;&lt;&#x2F;b&gt; of AIoT stands for! More information is expected to be available in Q1 and Q2 of 2023.&lt;&#x2F;p&gt;
&lt;p&gt;Like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&#x2F;issues&#x2F;6&quot;&gt;issue#6&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wish-to-open-source&quot;&gt;Wish to Open-source&lt;&#x2F;h3&gt;
&lt;p&gt;At JoinBase, we come from one open-source database&#x2F;data-warehouse community where we have done amazing works. However, balancing business and open-source is a tough nut to crack, as the resources needed to maintain an open-source project in today&#x27;s world are substantial, and competition between communities is no longer based on technical innovation but on community engineering. As a start-up and believers in technical innovation, we can&#x27;t take it. &lt;&#x2F;p&gt;
&lt;p&gt;However, our dedication to the technical progress of the world remains unchanged. In the time of download opening, I make a wish here: gradually open source the core of JoinBase within 2 years, if the company goes well. It is our sincere wish that the JoinBase community grows and flourishes along with us, and together, we can make this dream a reality.&lt;&#x2F;p&gt;
&lt;p&gt;Start to &lt;a href=&quot;&#x2F;products&quot;&gt;download&lt;&#x2F;a&gt; and experience the power of JoinBase, right now!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JoinBase 2022.12: HTTP and WebSocket Interfaces are Up for the Multi-protocol Time-series Database</title>
		<published>2022-12-29T12:00:00+00:00</published>
		<updated>2022-12-30T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/http-interface/" type="text/html"/>
		<id>https://joinbase.io/blog/http-interface/</id>
		<content type="html">&lt;h1 id=&quot;http-interface&quot;&gt;HTTP Interface&lt;&#x2F;h1&gt;
&lt;p&gt;In the existing databases, there are very few databases that can natively support HTTP interface. This brings up a problem: if users want to provide REST services based on these databases, they need to combine other HTTP services on the top of current databases.&lt;&#x2F;p&gt;
&lt;p&gt;The HTTP interface is an effort of JoinBase to prompt the end-to-end experience for its users. See the HTTP version of quick-start:&lt;&#x2F;p&gt;
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
      &lt;div id=&quot;jb1m&quot;&gt;&lt;&#x2F;div&gt;
      &lt;script src=&quot;&#x2F;asciinema-player.min.js&quot;&gt;&lt;&#x2F;script&gt;
      &lt;script&gt;
        AsciinemaPlayer.create(&#x27;&#x2F;casts&#x2F;quick_start_http.cast&#x27;, document.getElementById(&#x27;jb1m&#x27;), { preload: true, autoPlay: true });
      &lt;&#x2F;script&gt;
      &lt;p&gt;Tips: you can copy the command from the cast, paste the command into your shell to execute!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the above cast, a simple read-write-read REST based flow has been demonstrated:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Combine the SQL and HTTP client, you can do all data works under the PostgreSQL wire protocol. If you are a frontend developer, just work with curl is enough. A database console like psql or mysql is not needed any more.&lt;&#x2F;li&gt;
&lt;li&gt;The HTTP interface also supports the batch data ingestion like in the MQTT interface.&lt;&#x2F;li&gt;
&lt;li&gt;It is a piece of cake to integrate with your own tools or apps. Just your own REST style.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;quick-benchmark&quot;&gt;Quick Benchmark&lt;&#x2F;h4&gt;
&lt;p&gt;Another of big problem of HTTP protocol is that it is verbose and low efficient for the high performance application layer. Most database authors lack the performance optimization practice for the transport layer. This is another reason why the HTTP interface is not popular in the database community.&lt;&#x2F;p&gt;
&lt;p&gt;However, JoinBase, as built from scratch, fixes this problem. The authors of JoinBase are practiced with modern software optimizations for full stack in the long time. This time, we bring a top performance HTTP interface for our users like that done for the &lt;a href=&quot;&#x2F;benchmark&quot;&gt;MQTT interface implementation&lt;&#x2F;a&gt; previously.&lt;&#x2F;p&gt;
&lt;p&gt;The HTTP benchmark tools are very mature now. Here, we just pick up the great tool - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wg&#x2F;wrk&quot;&gt;wrk&lt;&#x2F;a&gt;, for the quick benchmark. We use another popular &lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;docs&#x2F;en&#x2F;interfaces&#x2F;http&#x2F;&quot;&gt;database with HTTP interface support - ClickHouse&lt;&#x2F;a&gt;, as the comparison object.&lt;&#x2F;p&gt;
&lt;p&gt;We build the wrk from latest head to and use ClickHouse latest stable version 22.9.7.34. The hardware is based on a single socket with Intel Xeon Platinum 8260 which has 48 hyper-threads. So the benchmark thread number of wrk is 24 threads. Benchmarking on a single node will lead to the competition for running resources. So, such a benchmark is not very rigorous. But, in our experience, the results are quantitatively acceptable from the view of comparison. Because, for all benchmark subjects, the environment and client configs are the same. And the running resource is reserved for both the client and the server.&lt;&#x2F;p&gt;
&lt;p&gt;Just jump to some interesting results:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP Ping &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;http&#x2F;http_ping_joinbase_vs_clickhouse.png&quot; alt=&quot;multi-protocol&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; HTTP ping bench with wrk &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This ping bench is for evaluating the intrinsic HTTP protocol implementation performance. The throughput of JoinBase ping is around ~25x faster than that of ClickHouse ping. The performance of JoinBase ping stands for the performance with a small message interaction. It is great to see that, even some conservative optimizations in the first release, &lt;strong&gt;JoinBase can reach 1.6 million HTTP requests&#x2F;response per second&lt;&#x2F;strong&gt;. Although, this performance is not matched against 7 million mps in our MQTT interface. But the record of MQTT interface is done for QoS=0, the implementation of HTTP interface is equivalent to the QoS=1 level of MQTT interface.&lt;&#x2F;p&gt;
&lt;p&gt;There is another interesting difference between JoinBase and almost other databases: an authentication information must be provided to all the JoinBase interface before using. So, &lt;strong&gt;you can not use JoinBase before setting up a user&#x2F;password&lt;&#x2F;strong&gt;. But common DBMSs, like ClickHouse, PostgreSQL and MySQL, allow default user which often results in silent compromises in the real world.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;HTTP Pipelined Ping &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;One interesting feature of wrk is that wrk supports the HTTP pipelining. JoinBase&#x27;s HTTP interface does not fully optimize for HTTP pipelining. Because, in the IoT scenario, the client pipelining makes non-sense and most clients does not support pipelining.&lt;&#x2F;p&gt;
&lt;p&gt;But JoinBase implements all the HTTP interface features from the scratch. This makes JoinBase can control all the aspects of implementation. We just make a tiny change to allow JoinBase can correctly handle the pipelined requests.&lt;&#x2F;p&gt;
&lt;p&gt;Let see the result:&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;http&#x2F;http_ping_pipeline_joinbase_clickhouse.png&quot; alt=&quot;multi-protocol&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; HTTP pipelined ping bench with wrk &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Clearly, our pipeline implementation &lt;strong&gt;boosts the throughput to 3 million requests per second&lt;&#x2F;strong&gt;, which is ~2x of the non-pipelined case (and ~50x of that of ClickHouse ping). On the contrary, ClickHouse does not support the pipelined HTTP requests at all. So, all the socket connections suck in the bench. &lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;HTTP Based Select Query&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s roll a further non-trivial case into the benchmark: do one plain query via the HTTP interface.&lt;&#x2F;p&gt;
&lt;p&gt;Due to that JoinBase use the HTTP body to carry the query, we use the following simple script for wrk benching. For the ClickHouse, it supports to put the query text in the uri&#x27;s parameters, so the direct wrk command is OK to run. (The ugly is that you need to escape necessary characters in the uri, which is not for human-beings.)&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;http&#x2F;wrk_conf_bench_select.png&quot; alt=&quot;wrk script for benching query select&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Simple wrk script for benching JoinBase &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;http&#x2F;http_select_joinbase_vs_clickhouse.png&quot; alt=&quot;multi-protocol&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; HTTP based select query bench with wrk &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The bench result is very profound: the performance of JoinBase HTTP based simple query is ~100x that of ClickHouse. JoinBase crushes the ClickHouse in this query scenario! JoinBase truly have a unique base, you can&#x27;t achieve an order of magnitude performance improvement with the copycat.&lt;&#x2F;p&gt;
&lt;p&gt;We have more non-trivial queries shown in our &lt;a href=&quot;&#x2F;benchmark&quot;&gt;benchmark page&lt;&#x2F;a&gt;&#x27;s concurrency benching section. Here, the HTTP interface itself is not the bottleneck of the performance, so they share the same excellent outcome. It is also encouraged our users to repeat the bench yourself.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;JoinBase&#x27;s HTTP interface is so fast that you can use it to provide unlimited production-level REST services without any worry.&amp;quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;websocket-interface&quot;&gt;WebSocket Interface&lt;&#x2F;h1&gt;
&lt;p&gt;WebSocket interface is also available from now. And a new webAssembly based high performance interface is experimented in the interface implementation. If you are interesting, feel free to &lt;a href=&quot;&#x2F;request&quot;&gt;request&lt;&#x2F;a&gt; the free JoinBase.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;multi-protocol-ecosystem&quot;&gt;Multi-protocol Ecosystem&lt;&#x2F;h1&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;http&#x2F;multi-protocol.png&quot; alt=&quot;multi-protocol&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Multi-protocol Ecosystem of JoinBase &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;With the HTTP interface up, the end-to-end experience has been enabled for any time-series data services. So, JoinBase becomes a more general time-series optimized database.&lt;&#x2F;p&gt;
&lt;p&gt;The HTTP interface is one long waiting feature requested by the community. Now we just complete this feature for our community. And we are interesting more interfaces, for example, the green-colored words in the above picture. But we don&#x27;t have enough information right now to confirm whether implementing them is necessary. &lt;strong&gt;If you are interested in these or other protocols&#x2F;interfaces, please join our community!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally, all interfaces in JoinBase has two modes: plain and secured. It is found that the secured transports are usually implemented within 80%+ performance of the plain transports. (More benchmarks of secured transports will be shown in the future.). JoinBases only recommend to use secured transports in the production in that the secured transports are fast enough.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;extensions&quot;&gt;Extensions&lt;&#x2F;h1&gt;
&lt;p&gt;From this release, JoinBase start to support &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;extensions&quot;&gt;three types of extensions&lt;&#x2F;a&gt;: UDM(User Defined Mapping), UDF(User Defined Function) and UDVF(User Defined Vector Function). Through these extensions, JB solves the problem of user-defined logic hooking in main aspects. Let&#x27;s discuss the UDM as the example.&lt;&#x2F;p&gt;
&lt;p&gt;Some of our users say that it is hard to change the message payload themselves because the end devices are bought from 3rd party vendor. The &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;extensions#user-defined-mapping&quot;&gt;UDM extension&lt;&#x2F;a&gt; just come to solve this problem. &lt;&#x2F;p&gt;
&lt;p&gt;In the first release of JoinBase, like some MQTT brokers or databases, JoinBase has supported a rule based mapping. But the real-world JSON payload is arbitrarily nested, the simple rule based way is not enough to solve the arbitrarily complex payload mapping. Most brokers or databases just stop here. Some databases, like MongoDB or PostgreSQL, support the store the JSON or its variants directly. The price is that the query and analysis performance drops by orders of magnitude.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase solves this problem by integrating a message stream processing&#x2F;mapping engine into the database. Just image that you have an embedded Kafka in JoinBase. The difference for JoinBase is that we push the processing engine into the top performance in that all components in JoinBase are organically integrated together in the zero-abstraction, zero-copy and zero-allocation style.&lt;&#x2F;p&gt;
&lt;p&gt;A real-world complex session based message mapping extension has been provided for one of our energy IoT users in the form of UDM. Interestingly, the UDM extension can be more efficient than that of general rule based mapping engine, since you can provide a much simplified custom logic in your UDM.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interesting, feel free to &lt;a href=&quot;&#x2F;request&quot;&gt;request&lt;&#x2F;a&gt; the latest free JoinBase.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;topic-aliases&quot;&gt;Topic Aliases&lt;&#x2F;h1&gt;
&lt;p&gt;Some of our users say that it is hard to change the message topic as well because the end devices are from 3rd party vendor. From this release, JoinBase start to support one feature called &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;topics#topic-aliases&quot;&gt;&lt;code&gt;Topic Aliases&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With topic aliases, You can mapping any topic&#x2F;path into the normalized &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;topics&quot;&gt;topic&lt;&#x2F;a&gt; in JoinBase. This is done by simply setting the mappings in the conf file. For example, the following lines in the conf,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[topic.aliases]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;sensors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;edge&#x2F;x2view&#x2F;1234567890&#x2F;some_deeper_uri_path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;sensors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;edge&#x2F;x2view&#x2F;0123456789&#x2F;another_deeper_uri_path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Two paths &amp;quot;&#x2F;edge&#x2F;x2view&#x2F;1234567890&#x2F;some_deeper_uri_path&amp;quot; and &amp;quot;&#x2F;edge&#x2F;x2view&#x2F;0123456789&#x2F;another_deeper_uri_path&amp;quot; are mapped to one single normalized topic &amp;quot;&#x2F;abc&#x2F;sensors&amp;quot; which is equivalent to the database entity &amp;quot;abc.sensors&amp;quot;. All messages sent to the two long topics will go to the database table &amp;quot;abc.sensors&amp;quot;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;one-more-thing&quot;&gt;One More Thing&lt;&#x2F;h1&gt;
&lt;p&gt;JoinBase provides lots of values beyond the peers of this era. We sincerely invite more users to join our community. JoinBase can help you!&lt;&#x2F;p&gt;
&lt;p&gt;Get your AIoT data services one step ahead with free SmartBase and JoinBase by &lt;a href=&quot;&#x2F;request&quot;&gt;request here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Talk with SmartBase and JoinBase developers in &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;sqX6vfnURj&quot;&gt;the Discord server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Watch or submit your ideas &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;in the community&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Extensions</title>
		<published>2022-12-01T08:20:00+00:00</published>
		<updated>2022-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/extensions/" type="text/html"/>
		<id>https://joinbase.io/docs/references/extensions/</id>
		<content type="html">&lt;p&gt;There are three types of extensions in JoinBase: UDM(User Defined Mapping), UDF(User Defined Function) and UDAF(User Defined Aggregate Function).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;user-defined-mapping&quot;&gt;User Defined Mapping&lt;&#x2F;h3&gt;
&lt;p&gt;The UDM enables a mechanism to support arbitrary user defined mapping logic. &lt;&#x2F;p&gt;
&lt;p&gt;We provide a C ABI based API for UDM. Any logic in any language which can be compiled into the API-compatible dynamic library are supported.&lt;&#x2F;p&gt;
&lt;p&gt;A workable example is available in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;extensions&quot;&gt;this C based sample extension project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;user-defined-function&quot;&gt;User Defined Function&lt;&#x2F;h3&gt;
&lt;p&gt;See more in the document of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;advanced&quot;&gt;advanced features&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;user-defined-aggregate-functions&quot;&gt;User-Defined Aggregate Functions&lt;&#x2F;h3&gt;
&lt;p&gt;See more in the document of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;advanced&quot;&gt;advanced features&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SmartBase: A Free Low-code Platform for AIoT</title>
		<published>2022-11-23T12:00:00+00:00</published>
		<updated>2022-11-23T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/smartbase/" type="text/html"/>
		<id>https://joinbase.io/blog/smartbase/</id>
		<content type="html">&lt;h1 id=&quot;why-yet-another-iot-dashboard&quot;&gt;Why Yet Another IoT Dashboard&lt;&#x2F;h1&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;smartbase&#x2F;dashboard.jpg&quot; alt=&quot;dashboard&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Where the dashboard will take us? &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Because we want IoT users to have more and better choices.&lt;&#x2F;p&gt;
&lt;p&gt;Currently there are existed IoT dashboards, like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thingsboard&#x2F;thingsboard&quot;&gt;ThingsBoard&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;datacake.co&#x2F;&quot;&gt;Datacake&lt;&#x2F;a&gt;. Different products are developed by different people with different goals in their minds. Some are open source, but they may be started from the feature oriented engineering and lack enough performance for the real world. Others are source closed, you can pay for the service but there is a cost burden for small business units, and you can not do customization.&lt;&#x2F;p&gt;
&lt;p&gt;ThingsBoard is the builtin but pluggable frontend of JoinBase, which is a free all-in-one data stack built around our unique and innovative database technologies. We are committed to simplifying the IoT data pipeline while delivering the highest production efficiency. By lowering the consumption threshold of IoT data, we believe that JoinBase can benefit every organization and individual in this era.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;&#x2F;h1&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;SmartBase w&#x2F; JoinBase&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;ThingsBoard&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Datacake&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Private deployment&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Cloud service&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;coming soon&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;have&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;only cloud&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Easy to use&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;38 seconds to &lt;br&#x2F;&gt;setup the JoinBase &lt;br&#x2F;&gt;and 2 minutes to &lt;br&#x2F;&gt;create an interactive&lt;br&#x2F;&gt; dashboard in SmartBase as below&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;complex&lt;br&#x2F;&gt; (try it yourself)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;?&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Free to use&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;free 2 devices&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Source available for customization&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Numbers of connected devices&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;unlimited (hardware limited)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;?&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2 devices for free&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Builtin free MQTT broker for large-scale production&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Builtin free database with full bigdata analysis&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Mixed SQL + MQTT style interactive dashboard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-check-circle&quot; style=&quot;color:green; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;i class=&quot;las la-times-circle&quot; style=&quot;color:red; font-size: 32px&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt;Comparison between SmartBase w&#x2F; JoinBase and some other IoT dashboards&lt;p&#x2F;&gt;
&lt;p&gt;Let&#x27;s just highlight unique points of SmartBase:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Not limited to connect the JoinBase, SmartBase is open to connect to other data sources, like PostgreSQL (and all its wired), MySQL (and all its wired), MQTT endpoints and more. &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Of course, the support to JoinBase with PostgreSQL and MQTT technologies is best and guaranteed.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;SmartBase is source available under the &lt;a href=&quot;&#x2F;blog&#x2F;usal&quot;&gt;USAL(User Source Available License)&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Become our users and request the sources for your business customization freely!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;show-case&quot;&gt;Show Case&lt;&#x2F;h1&gt;
&lt;p&gt;To demonstrate the great power of the SmartBase, just see a simple show case for SmartBase. &lt;&#x2F;p&gt;
&lt;p&gt;The data model can be simply described as the following SQL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span&gt;myhouse.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mysensors
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    hour UInt8,
&lt;&#x2F;span&gt;&lt;span&gt;    temp1 Float32,
&lt;&#x2F;span&gt;&lt;span&gt;    temp2 Float32
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;here, &lt;code&gt;hour&lt;&#x2F;code&gt; stands for the hour part of current sensor sampling, &lt;code&gt;temp1&lt;&#x2F;code&gt; for room #1 &#x27;s temperature, &lt;code&gt;temp2&lt;&#x2F;code&gt; for room #1 &#x27;s temperature. This may be naive, but it is simple enough. Just &lt;a href=&quot;&#x2F;request&quot;&gt;request free SmartBase&lt;&#x2F;a&gt; for all tries.&lt;&#x2F;p&gt;
&lt;p&gt;Then inject some random sensor data as like: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span&gt; mysensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s just start to create an interactive dashboard for my smart house!&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;Sq5SzEeeg88&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;smartbase&#x2F;smartbase_showcase.webp&quot; alt=&quot;create a dashboard by SmartBase&quot; class=&quot;img-fluid&quot;&gt;
&lt;&#x2F;a&gt;
&lt;p align=&quot;center&quot;&gt;Create an interactive dashboard in two minutes&lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;A fully detailed record video is &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;Sq5SzEeeg88&quot;&gt;put on here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Recap for the show case:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;General build blocks or widgets for common AIoT are available.&lt;&#x2F;li&gt;
&lt;li&gt;Overlaying to any image with any widget is easy.&lt;&#x2F;li&gt;
&lt;li&gt;Any SQL query on arbitrary history is easy with JoinBase, which is not available to a common MQTT dashboard.&lt;&#x2F;li&gt;
&lt;li&gt;After-query data processing logic is easy.&lt;&#x2F;li&gt;
&lt;li&gt;After-query widget presentation hooking is easy.&lt;&#x2F;li&gt;
&lt;li&gt;Interaction is easy by the event handling of widgets.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In a word, the common AIoT interactive dashboarding has been well supported by the first SmartBase release. We are honored if you would like to give us more suggestions.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;more-links&quot;&gt;More Links&lt;&#x2F;h1&gt;
&lt;p&gt;Get your AIoT one step ahead with free SmartBase and JoinBase by &lt;a href=&quot;&#x2F;request&quot;&gt;request here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Talk with SmartBase and JoinBase developers in &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;sqX6vfnURj&quot;&gt;the Discord server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Watch or submit your ideas &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;in the community&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>USAL: A New Source Available License</title>
		<published>2022-11-22T12:00:00+00:00</published>
		<updated>2022-11-22T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/usal/" type="text/html"/>
		<id>https://joinbase.io/blog/usal/</id>
		<content type="html">&lt;p&gt;(&lt;em&gt;Author 1: The USAL is new, and is one of our attempt to balance a healthy business cycle and open source. We will continue to update the license and explore ways to benefit this era.&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;(&lt;em&gt;Author 2: the word &lt;code&gt;open source&lt;&#x2F;code&gt; in this article refers to &lt;a href=&quot;https:&#x2F;&#x2F;opensource.org&#x2F;&quot;&gt;OSI(Open Source Initiative)&lt;&#x2F;a&gt; defined open source unless bolded and quoted &amp;quot;open source&amp;quot;&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;open-source-dilemma&quot;&gt;Open Source Dilemma&lt;&#x2F;h1&gt;
&lt;p&gt;As a long-term open source participant and a founder of tech company, I think around a question over and over again: &lt;strong&gt;how a startup can be built successfully with both open source and business?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is MongoDB successful? &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, MongoDB, four years ago &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2018&#x2F;10&#x2F;16&#x2F;mongodb-switches-up-its-open-source-license&#x2F;&quot;&gt;changed its license&lt;&#x2F;a&gt; to the &lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;licensing&#x2F;server-side-public-license&quot;&gt;Server Side Public License (SSPL)&lt;&#x2F;a&gt;, which is not an OSI approved open-source license.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is the company Databricks behind Apache Spark successful? &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This company has reached &lt;a href=&quot;https:&#x2F;&#x2F;www.databricks.com&#x2F;company&#x2F;newsroom&#x2F;press-releases&#x2F;databricks-raises-1-6-billion-series-h-investment-at-38-billion-valuation&quot;&gt;$38 billion post-money valuation&lt;&#x2F;a&gt; after the H series of Databricks. However, the company&#x27;s core native query engine - &lt;a href=&quot;https:&#x2F;&#x2F;www.databricks.com&#x2F;product&#x2F;photon&quot;&gt;Photon&lt;&#x2F;a&gt; is not open sourced. Its open-source project under Apache License has a long time not to compete with its data analysis competitors in the performance, like ClickHouse.&lt;&#x2F;p&gt;
&lt;p&gt;It is obvious that, no matter how these startups say they are &lt;strong&gt;&amp;quot;open source&amp;quot;&lt;&#x2F;strong&gt;, the true interesting sources are not available for the business organizations. In fact,&lt;&#x2F;p&gt;
&lt;h4 id=&quot;open-source-is-an-anti-pattern-to-the-business&quot;&gt;Open source is an anti-pattern to the business&lt;&#x2F;h4&gt;
&lt;p&gt;Source codes are the core asset of a software company, no matter you are open source or closed source. Open-source means that you share the ownership of that asset to the world. Open core means you you share the ownership of that core asset to the world. &lt;&#x2F;p&gt;
&lt;p&gt;When the open source antis its business competitors, it antis itself in business as well.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;apache-license-is-dead-for-infra-startups&quot;&gt;Apache License is dead for infra startups&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;blog&#x2F;oss-relicensing-cockroachdb&#x2F;&quot;&gt;CockroachDB&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.timescale.com&#x2F;blog&#x2F;building-open-source-business-in-cloud-era-v2&#x2F;&quot;&gt;TimescaleDB&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;redis.com&#x2F;legal&#x2F;licenses&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;license-changes-confluent-platform&#x2F;&quot;&gt;Confluent&lt;&#x2F;a&gt; all changed their license for all or some parts of their platform from open source to source-available.&lt;&#x2F;p&gt;
&lt;p&gt;Two months ago, Akka, which is an old and well-known actor library used in many important Java&#x2F;Scala infras, &lt;a href=&quot;https:&#x2F;&#x2F;www.lightbend.com&#x2F;blog&#x2F;why-we-are-changing-the-license-for-akka&quot;&gt;changed from the open-source Apache License to the source-available Business Source License (BSL)&lt;&#x2F;a&gt;. If one open-source project can&#x27;t establish a good business in 13 years, it is really hard to expect more.&lt;&#x2F;p&gt;
&lt;p&gt;One week ago, the author of Mold linker, which is a low-level high performance linker tool, expressed his thoughts on &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1kiW9qmNlJ9oQZM6r5o4_N54sX5F8_ccwCy0zpGh3MXk&#x2F;edit#&quot;&gt;changing the license&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, the world enjoys such Apache License like permissive licenses, but not give deserved returns to the developers behind these licenses.&lt;&#x2F;p&gt;
&lt;p&gt;Apache License is truly dead for infra startups.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;cloud-is-not-the-savior&quot;&gt;Cloud is not the savior&lt;&#x2F;h4&gt;
&lt;p&gt;Firstly, cloud vendors host open source based services is the direct reason of above companies change their licenses.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, to enable cloud native service does not change any above open source anti-pattern to the business. Everyone can host the cloud service with the source, not mentioned that they can change the source to make the service better.&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps, the big tech giants are encouraged to continue to open source their infrastructures under the Apache License in that they have a responsibility to give back to the society.&lt;&#x2F;p&gt;
&lt;p&gt;For current open source startups, they surely has encountered the business dilemma. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;usal-user-source-available-license&quot;&gt;USAL (User Source Available License)&lt;&#x2F;h1&gt;
&lt;p&gt;Not only by encouraging technological innovation of infra startups, but also benefiting all individuals and commercial organizations in this era, I believe that &lt;strong&gt;&amp;quot;open source&amp;quot;&lt;&#x2F;strong&gt; need to adapt itself to the business better. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;usal&quot;&gt;User Source Available License (USAL)&lt;&#x2F;a&gt; is proposed to address this problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;core-of-the-usal&quot;&gt;Core of the USAL&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;user-centric&quot;&gt;User centric&lt;&#x2F;h4&gt;
&lt;p&gt;Only &lt;strong&gt;users&lt;&#x2F;strong&gt; of the product are granted with the right of the product&#x27;s source codes. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;commercial-friendly&quot;&gt;Commercial-friendly&lt;&#x2F;h4&gt;
&lt;p&gt;Unlike the &lt;a href=&quot;https:&#x2F;&#x2F;mariadb.com&#x2F;bsl11&#x2F;&quot;&gt;BSL&lt;&#x2F;a&gt; which limits the production use, the USAL explicitly allows production use. It is more like the Apache License without (re)distribution right. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;compatible-with-all-kinds-of-other-licenses&quot;&gt;Compatible with all kinds of other licenses&lt;&#x2F;h4&gt;
&lt;p&gt;You can change to a more permissive license if you think you can control all the ecosystem, or provide a commercial license when big giants want to use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;workflow-of-the-usal-licensing&quot;&gt;Workflow of the USAL licensing&lt;&#x2F;h2&gt;
&lt;p&gt;The USAL licensing can be done with a workflow rather than the one-time licensing. &lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;usal&#x2F;usal_workflow.png&quot; alt=&quot;Workflow of the USAL&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; The Common Workflow of the USAL &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One great common workflow is like this: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The people or organizations to request and evaluate the free product firstly. &lt;&#x2F;li&gt;
&lt;li&gt;The people or organizations become &lt;strong&gt;users&lt;&#x2F;strong&gt; when they decide the product fits for them.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;users&lt;&#x2F;strong&gt; request the USAL licensed sources for further interests or concerns.&lt;&#x2F;li&gt;
&lt;li&gt;The licensor distributes the USAL licensed sources to the &lt;strong&gt;users&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;users&lt;&#x2F;strong&gt; do customizing, contributing or any other USAL license allowed things.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits-of-the-usal&quot;&gt;Benefits of the USAL&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;strong-operability&quot;&gt;Strong operability&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;change date&lt;&#x2F;code&gt; concept of BSL seemly makes a good trade-off, but one real-world big project may have millions of commits. In practice, it is impossible to judge the exact change date for a particular piece of sources.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The license is clear that you can anything to the licensed sources except the (re)distribution.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;strong-objective-and-business-scalability&quot;&gt;Strong objective and business scalability&lt;&#x2F;h4&gt;
&lt;p&gt;The USAL is user centric. You only distribute the licensed sources to your users. These users are strongly targeted. After making sure that they are users of your product, you grant the right of sourcing to users in their business without any copycat. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;With USAL, the advantages of Apache License are inherited, while the disadvantages of Apache License are avoided.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;strong-contributions-to-the-times&quot;&gt;Strong contributions to the times&lt;&#x2F;h4&gt;
&lt;p&gt;All the people and business in this era still freely get and adapt the sources to their business under the permissive USAL. The biggest contribution of current permissive open source licenses for business innovations in this era is kept. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;BSL breaks the greatest feat of open source, USAL fixes it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;source-available-should-be-the-part-of-open-source&quot;&gt;Source available should be the part of Open Source&lt;&#x2F;h1&gt;
&lt;p&gt;The OSI(Open Source Initiative)&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Open_Source_Definition&quot;&gt;Open Source Definition&lt;&#x2F;a&gt; has been out of the pace of the times. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Absolute power corrupts absolutely&amp;quot;   - Lord Acton&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here, for open source, &lt;strong&gt;absolute open may go to its opposite as well&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s use the USAL to pave a new path for the business of &lt;strong&gt;&amp;quot;open source&amp;quot;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JoinBase 2022.11: An IoT Database with Built-in MQTT Broker</title>
		<published>2022-11-08T12:00:00+00:00</published>
		<updated>2022-11-08T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/joinbase-as-mqtt-broker/" type="text/html"/>
		<id>https://joinbase.io/blog/joinbase-as-mqtt-broker/</id>
		<content type="html">&lt;h1 id=&quot;quick-intro&quot;&gt;Quick Intro&lt;&#x2F;h1&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;joinbase_as_mqtt_broker&#x2F;joinbase_arch.png&quot; alt=&quot;joinbase&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; IoT data made simple with JoinBase! &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;JoinBase is a free all-in-one data stack built around our unique and innovative database technologies. &lt;&#x2F;p&gt;
&lt;p&gt;We are committed to simplifying the IoT data pipeline while delivering the highest production efficiency. By lowering the consumption threshold of IoT data, we believe that JoinBase can benefit every organization and individual in this era.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-built-in-broker&quot;&gt;Why Built-in Broker&lt;&#x2F;h1&gt;
&lt;p&gt;The answer is, &lt;strong&gt;not only the built-in broker!&lt;&#x2F;strong&gt; &lt;&#x2F;p&gt;
&lt;p&gt;The IoT data and data stack are expanding violently, and out of control for many enterprises. JoinBase wants to change this.&lt;&#x2F;p&gt;
&lt;p&gt;We plan to add more interesting IoT scenario simplifications and integrations in JoinBase to allow developers to build IoT data systems by using one or two simple techniques which they are familiar with, from zero to planetary scale.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;early-access-stressing&quot;&gt;Early Access Stressing&lt;&#x2F;h1&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;joinbase_as_mqtt_broker&#x2F;stopwatch.jpg&quot; alt=&quot;joinbase&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Let&#x27;s stress! &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In order to observe the performance of each brokers under the ultimate pressure, we, again like our &lt;a href=&quot;&#x2F;blog&#x2F;intro_oidbs&quot;&gt;OIDBS&lt;&#x2F;a&gt;, create a new fastest stressing&#x2F;benchmarking tool called &lt;code&gt;MQTTBT&lt;&#x2F;code&gt;. In this new stressing tool, the total end-to-end ingestion throughput is proposed to evaluate. We will publish a dedicated blog article for introducing this tool soon (you can always request it in the community in advance).&lt;&#x2F;p&gt;
&lt;p&gt;The following the stressing process and the result of JoinBase 2022.11 in in 2p-1s (2 publisher to 1 subscriber):&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;joinbase_as_mqtt_broker&#x2F;stress_results_joinbase.gif&quot; alt=&quot;stress result of JoinBase&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Stressing process and the result of JoinBase 2022.11 (gif) &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Surprisingly, it is found that many popular brokers, like EMQX and HiveMQ CE, can not pass our stress tool under non-trivial QoS=0 ingestion connections. &lt;&#x2F;p&gt;
&lt;p&gt;When the pressure exceeds their capacity, EMQX will disconnect the subscribers, HiveMQ CE will drop outgoing messages even for 1p-1s. Ridiculously, for the lack of right documents, we still can not figure out how to config them to work under non-trivial ingestion connections after hours searching.&lt;&#x2F;p&gt;
&lt;p&gt;Although the message in QoS=0 is not guaranteed by the spec, the tacklings of these brokers are not IoT scenario friendly. (We discuss the good design in the later section.) &lt;&#x2F;p&gt;
&lt;p&gt;In the real-world IoT scenario, the sensor value is generated continuously, one loss point is not important, but QoS=0 provides 10x best performance than QoS=1. If the connection is lost, you just lose the in-flight message, which is usually one for that client. JoinBase guarantees that if the connection is reliable, the message even with QoS=0 is guaranteed to be stored reliably (assumed that the OS is running normally). Also in JoinBase, millions of connections and millions of messages are unified without any compromises. This brings more possibilities and greater flexibility to the design of large-scale IoT data transport networks.&lt;&#x2F;p&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;joinbase_as_mqtt_broker&#x2F;stress_results_emqx.gif&quot; alt=&quot;IoT scenarios&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Stressing process and the result of EMQX (gif) &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The above gif is the EMQX stressing process and result in 2p-1s. It is easy to find that &lt;b&gt;the performance of the JoinBase 2022.11 is ~5x faster than that of one popular broker EMQX (5.0.9) in the same stressing condition&lt;&#x2F;b&gt;. The HiveMQ even does not pass our stressing in any p-s combination.&lt;&#x2F;p&gt;
&lt;p&gt;We will present a detailed benchmark report in the near future.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;safety-and-privacy&quot;&gt;Safety and Privacy&lt;&#x2F;h1&gt;
&lt;p&gt;In benchmarking, we find that EMQX at least silently reads all disk infos in current system, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;log&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-log &quot;&gt;&lt;code class=&quot;language-log&quot; data-lang=&quot;log&quot;&gt;&lt;span&gt;2022-11-07T12:53:19.340116+00:00 [notice] alarm_handler: {set,{{disk_almost_full,&amp;quot;&#x2F;data&#x2F;n4&amp;quot;},[]}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;&#x2F;data&#x2F;n4&lt;&#x2F;code&gt; is an unused disk in the system, but EMQX is put in another disk with nothing about knowing &lt;code&gt;&#x2F;data&#x2F;n4&lt;&#x2F;code&gt; in conf. Futhermore, EMQX enables its telemetry by default, like many other open-source products (for example, VSCode or TimescaleDB).&lt;&#x2F;p&gt;
&lt;p&gt;We strongly recommend that any infrastructure product should not collect any user information without explicit permission.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase keeps highest standard in the field of product safety and privacy:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JoinBase do not silently write any data to the disk of users or any location of the Web.&lt;&#x2F;p&gt;
&lt;p&gt;All data directories must be specified in the conf file. And we suggest you change to your onw directories at the first get started document.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can do nothing to JoinBase if you do not create a dedicated user.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, the core philosophy of JoinBase is allow-list based. All external interactions are checked explicitly. You must create a new user to use JoinBase. (Don&#x27;t worry, it is so quick). Compromises that often occur on other databases by the default initial configuration never happen in JoinBase. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;JoinBase do not send any data out to any Web location.&lt;&#x2F;p&gt;
&lt;p&gt;And JoinBase do not do any non-user-business background works, like telemetry. On the contrary, many distributions of open source projects collect various user information by default.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;think-time&quot;&gt;Think Time&lt;&#x2F;h1&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;joinbase_as_mqtt_broker&#x2F;think.jpg&quot; alt=&quot;joinbase&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Why is JoinBase faster? &lt;p&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We don&#x27;t want to fire any war between languages or systems. Here, we just show some thoughts under the hood which users should know to construct a performance critical engineering:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Performance is largely independent of language, provided the language and system keep wise in its design.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Of course, to make one language and system kept wise is hard. &lt;&#x2F;p&gt;
&lt;p&gt;Here, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;&quot;&gt;JoinBase&lt;&#x2F;a&gt; is done in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, correspondingly EMQX is done in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Erlang_(programming_language)&quot;&gt;Erlang&lt;&#x2F;a&gt; and HiveMQ CE is done in Java. &lt;&#x2F;p&gt;
&lt;p&gt;Erlang is an interesting language to provide wide features to enable Erlang based network application programming easier. Java use GC to make developer happy without worries about memory safety. However, &lt;strong&gt;there is no free lunch&lt;&#x2F;strong&gt;. Features come with kinds of prices inevitably.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust philosophy, conversely, is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;KISS_principle&quot;&gt;KISS&lt;&#x2F;a&gt;. All the things like actors or hot-swappiness should and could be done in the external mechanism. JoinBase follows the Rust philosophy and built from scratch. We keep every call in great engineering and performance shape for our users. We even fix the broken message channel in recent Rust standard library. Yes, even official language standard library has problems! Don&#x27;t rely blindly!&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Correct design philosophy is important for your business&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;One common problem HiveMQ CE and EMQX mentioned in above section is that, they are not resilient enough under stressful situations. &lt;&#x2F;p&gt;
&lt;p&gt;The right reaction under high load is &lt;code&gt;back-pressure&lt;&#x2F;code&gt;. From the kernel to the application layer, we have many opportunities to do this kind of transport back-pressure. Blindly killing connection or messages is the ugliest choice. It makes the system highly underutilized, and more importantly, unavailable in high pressure.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;coming-soon&quot;&gt;Coming Soon&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Stress&#x2F;benchmark mainstream brokers with open-source tools.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Any benchmark which can not be reproduced is meaningless. Any benchmark without apple-to-apple comparison is meaningless as well. We are responsible for providing insights to all IoT users on how to choose high performance data system. &lt;&#x2F;p&gt;
&lt;p&gt;We will release the complete benchmark report in the near future. Stay tuned!&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Beyond the interoperability between database and MQTT.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In JoinBase, we have made the &lt;code&gt;Topic&lt;&#x2F;code&gt; concept in MQTT and the &lt;code&gt;Table&lt;&#x2F;code&gt; concept in database exchangeable. Soon, we will enable the query capability via MQTT subscribing. This shows how we greatly push both two communities by creating a new work pattern!&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Any great idea proposed by users in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&#x2F;issues&quot;&gt;the community issues&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;more-links&quot;&gt;More Links&lt;&#x2F;h1&gt;
&lt;p&gt;Get your IoT infrastructure one step ahead with free JoinBase by &lt;a href=&quot;&#x2F;request&quot;&gt;request latest free JoinBase&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Talk with JoinBase developers in &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;sqX6vfnURj&quot;&gt;the Discord server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Watch or submit your ideas &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;in the community&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pstations: TPCx-IoT Inspired IoT Data Benchmark Model for OIDBS</title>
		<published>2022-10-23T12:00:00+00:00</published>
		<updated>2022-10-26T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/pstations/" type="text/html"/>
		<id>https://joinbase.io/blog/pstations/</id>
		<content type="html">&lt;h1 id=&quot;problems&quot;&gt;Problems&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;pstations&#x2F;things.jpg&quot; alt=&quot;IoT scenarios&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; How to benchmark the internet of things? &lt;p&#x2F;&gt;
&lt;p&gt;IoT scenarios are increasingly becoming scalable. From the case of big giants like that Apple which needs handling &lt;a href=&quot;https:&#x2F;&#x2F;www.statista.com&#x2F;statistics&#x2F;1221051&#x2F;apple-watch-users-worldwide&#x2F;&quot;&gt;hundreds of million Apple watches&lt;&#x2F;a&gt; to that of one small individual who just wants to build up a homebrew &lt;a href=&quot;&#x2F;blog&#x2F;tinywild&#x2F;&quot;&gt;animal monitoring system&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;p&gt;In OIDBS, we have solved the methodologies of benchmark. Nextly, we may pick up for a nice data model. Two New York City taxi dataset based models have been proposed. The problem of them is, that they are fixed external data sources. A scalable and fast enough model is needed for the scalable IoT scenarios as mentioned.&lt;&#x2F;p&gt;
&lt;p&gt;Generally, any data sources can be chosen to do the benchmark. But it is better to refer to any useful previous work in that a real-world inspired model reduce the understanding resistance to the benchmark of users.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tpcx-iot-screwed-up&quot;&gt;TPCx-IoT Screwed Up&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;pstations&#x2F;tpc.jpg&quot; alt=&quot;IoT scenarios&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; How to benchmark the internet of things? &lt;p&#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tpc.org&#x2F;tpcx-iot&quot;&gt;TPCx-IoT&lt;&#x2F;a&gt; is a benchmark for IoT gateway systems proposed by &lt;a href=&quot;https:&#x2F;&#x2F;www.tpc.org&quot;&gt;TPC org&lt;&#x2F;a&gt;. But it has many problems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This benchmark is not user oriented but commercial vendor oriented.
Like other &amp;quot;notorious&amp;quot; benchmarks proposed by TPC (for example, TPC-H and TPC-DS), the hardware is provided per vendor, different hardwares plus different softwares with &amp;quot;dedicated optimizations&amp;quot; make the result ranking totally no sense.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This benchmark is mainly for benching data system for IoT.
There is no gateway ingestion interfaces considered in the spec. Then the benchmark in transporting is not standardized, which leaves the benchmark capabilities of this ingesting or importing suspectable.
Although  is mentioned in the spec, but there is one main-stream MQTT gateway used in the kit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The benchmark is complex. Not explicit pluggablity and extensibility in the benchmark kit. If a benchmark is hard to repeat, it just makes nonsense.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;pstations-in-oidbs-comes&quot;&gt;Pstations in OIDBS Comes&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;pstations&#x2F;grid1.jpg&quot; alt=&quot;Power Grid&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Do you know the power grid of California has 3,200 power substations in around 2017? &lt;p&#x2F;&gt;
&lt;p&gt;Pstations is an OIDBS model adapted from the power substations model of TPCx-IoT. The workflow of benchmark framework is still that of OIDBS, but the data features and scenarios are based on those power substations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pstations&lt;&#x2F;code&gt; model is simple actually. Let us do a concise understanding via the following schema creation SQL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span&gt;benchmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pstations
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    station_id UInt32,
&lt;&#x2F;span&gt;&lt;span&gt;    sensor_id UInt8,
&lt;&#x2F;span&gt;&lt;span&gt;    sensor_kind UInt8,
&lt;&#x2F;span&gt;&lt;span&gt;    sensor_value Float32,
&lt;&#x2F;span&gt;&lt;span&gt;    ts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DateTime
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;partition BY ymdh(ts);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the schema is only for understanding model because from the message to the table record is simply a 1-1 mapping.&lt;&#x2F;p&gt;
&lt;p&gt;The model &lt;code&gt;pstations&lt;&#x2F;code&gt; contains 5 fields: station_id, sensor_id, sensor_kind, sensor_value and ts. The model objects consists of two-level object: stations(the short of substations) and sensors. In a real-world configurations, it may have thousands of stations, and hundreds of sensors. &lt;strong&gt;This means that it is very reasonable for even 1 million sensoring points per second.&lt;&#x2F;strong&gt; This is the biggest characteristic of the TPCx-IoT model which has been reserved by &lt;code&gt;pstations&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the model &lt;code&gt;pstations&lt;&#x2F;code&gt;, we use a maximum flexibility schema. That is, the type of sensor is recorded by the sensor_kind field. So, you can extend sensor types as much as possible (here, is limit to max 256 by UInt8 type). &lt;&#x2F;p&gt;
&lt;p&gt;One point is that it is possible to use Enum-like types here. But the Enum-like type is a database concept, other IoT data systems, like message brokers, do not have such concept. So, for no barriers to understanding for all users, we just use the plain integer ids to represent the objects in the model.&lt;&#x2F;p&gt;
&lt;p&gt;Get more details from the sources of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;oidbs&quot;&gt;the OIDBS project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-to-use&quot;&gt;How to Use&lt;&#x2F;h3&gt;
&lt;p&gt;Just a one-liner is used to generate a CSV format pstations model data file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oidbs&lt;&#x2F;span&gt;&lt;span&gt; -- gen OUTPUT_PATH -w 1 -i 2 -m &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;num_sensors&amp;quot;:2,&amp;quot;num_stations&amp;quot;:4}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; -o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is the table of parameters:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;parameter&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;meanings&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;OUTPUT_PATH&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the only mandatory parameter for output file path, please change to your own path.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;-w&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the number of generation workers. &lt;br&#x2F;&gt;In the same time, it decides the number of output files, then decides the ingesting&#x2F;importing concurrency.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;-i&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the time interval per worker to gen in seconds, the default is 1 second. Note that the time interval is per worker means that different workers generate the records in different time spans.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;-m&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the model parameters, in the model specific json string format, the default is empty json object. &lt;br&#x2F;&gt;In the &lt;code&gt;pstations&lt;&#x2F;code&gt; model, there are two model parameters: num_sensors and num_stations. We can not specific these parameters in advance in the fixed parameter list, because the number of models is unlimited.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;-o&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the flag to enable output out of order. &lt;br&#x2F;&gt;It doesn&#x27;t make much sense for the brokers, because brokers do not care the ordering of messages before their incoming.  &lt;br&#x2F;&gt;This is mainly for benching the end-to-end data stack with databases in the pipeline. We will demonstrate out-of-order messaging could have a huge performance impact on databases in the pipeline in the future.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;pstations-edge-100m&quot;&gt;Pstations Edge-100m&lt;&#x2F;h3&gt;
&lt;p&gt;Recently, we are preparing an &lt;a href=&quot;&#x2F;ranking&quot;&gt;&lt;strong&gt;Edge Data Stack Capabilities Ranking&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for the world (WIP). The interesting results will be discussed in that dedicated page when comes out.&lt;&#x2F;p&gt;
&lt;p&gt;Because from low-end SBCs(Single-board computers) to high-end edge nodes, the performance gap is two or more orders of magnitude. The existed external NYC taxi dataset model is either too big or too small. That&#x27;s exactly what &lt;code&gt;pstations&lt;&#x2F;code&gt; came to solve.&lt;&#x2F;p&gt;
&lt;p&gt;Here, we just proposed a &lt;code&gt;pstations edge-100m&lt;&#x2F;code&gt; for the edge scenarios, which could be generated with the following OIDBS command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oidbs&lt;&#x2F;span&gt;&lt;span&gt; -- gen OUTPUT_PATH -w 10000 -i 100 -m &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;num_sensors&amp;quot;:10,&amp;quot;num_stations&amp;quot;:10}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; -o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;here, we have ten sensors in every ten stations will generate 10000 files with 100 seconds time in the echo file&#x27;s time span. The total rows of records in the &lt;code&gt;pstations edge-100m&lt;&#x2F;code&gt; is 100 millions which is the stem of edge-100m naming.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h1&gt;
&lt;div class=&quot;row justify-content-center text-center&quot;&gt;
      &lt;div id=&quot;jb1m&quot;&gt;&lt;&#x2F;div&gt;
      &lt;script src=&quot;&#x2F;asciinema-player.min.js&quot;&gt;&lt;&#x2F;script&gt;
      &lt;script&gt;
        AsciinemaPlayer.create(&#x27;&#x2F;casts&#x2F;pstations.cast&#x27;, document.getElementById(&#x27;jb1m&#x27;), { preload: true, autoPlay: true });
      &lt;&#x2F;script&gt;
      &lt;p&gt;Tips: you can copy the command from the cast, paste the command into your shell to execute!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here, it is interesting to find that we generate the 3.4GB &lt;code&gt;pstations edge-100m&lt;&#x2F;code&gt; dataset in 3.88s in this machine. A modern tool built for the modern hardwares makes our lives easier!&lt;&#x2F;p&gt;
&lt;p&gt;Please see &lt;a href=&quot;&#x2F;blog&#x2F;intro-oidbs&#x2F;#demo&quot;&gt;the demo in the introduction article&lt;&#x2F;a&gt; about how to import the generated model&#x27;s data against your MQTT brokers or IoT data stacks like JoinBase.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;outlook&quot;&gt;Outlook&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;code&gt;pstations&lt;&#x2F;code&gt; model can be strengthened in some places. For example, we use a biased random data distribution for the fields, maybe more distributions could be tested. In the future, we hope more real-world inspired models can be added into the OIDBS to make benchmarks covering more dedicated scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;One of most important near episodes is the upcoming &lt;a href=&quot;&#x2F;ranking&quot;&gt;&lt;strong&gt;Edge Data Stack Capabilities Ranking&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. The capabilities of edge computing systems will be rolled out within modern IoT data stack perspectives, from the smallest 4.2cm*4.2cm SBC to the largest hundreds-of-cores bare metal server.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>OIDBS: An Open Source MQTT Driven Benchmark Suite for Massive IoT Data</title>
		<published>2022-10-18T12:00:00+00:00</published>
		<updated>2022-10-19T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/intro-oidbs/" type="text/html"/>
		<id>https://joinbase.io/blog/intro-oidbs/</id>
		<content type="html">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h1&gt;
&lt;p&gt;In the development of JoinBase, we complete the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;oidbs&quot;&gt;OIDBS (Open IoT Database Benchmark Suite)&lt;&#x2F;a&gt;. Because we find that there is not a simple, flexible, high performance tool or framework to help benchmarking an IoT end-to-end data stack. To enable a concise end-to-end experience is important for in-production data systems. Because a full IoT data stack may be complex, there can be a huge gap between the local sub-system and the global system.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;make-benchmark-fast-and-simple&quot;&gt;Make Benchmark Fast and Simple&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;intro_oidbs&#x2F;oidbs_arch.png&quot; alt=&quot;OIDBS Arch&quot; class=&quot;img-fluid&quot;&gt;
&lt;h3 id=&quot;composable-commands&quot;&gt;Composable Commands&lt;&#x2F;h3&gt;
&lt;p&gt;One key design of OIDBS is: composable commands. &lt;&#x2F;p&gt;
&lt;p&gt;The benchmark suite consists of three commands: gen, import and bench. &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gen&lt;&#x2F;code&gt;: to generate the controlled, reproducible message data to files on disks in CSV or JSON format.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;import&lt;&#x2F;code&gt;: to import the CSV or JSON format files to the MQTT brokers or PostgreSQL&#x2F;Timescale servers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;bench&lt;&#x2F;code&gt;: run preset SQL queries on specific targets.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;These three composable commands decouple main capabilities of various IoT and data scenarios. And the decoupling makes the benchmark faster and less overhead. For example, if the message is generated in-place in the hot loop to send the message, the data calculating and filling must interfere with sending.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hierarchical-pluggability&quot;&gt;Hierarchical Pluggability&lt;&#x2F;h3&gt;
&lt;p&gt;For maximum external understanding and contribution, we offer pluggable designs at various levels with minimal architecture. The whole OIDBS is easily to be extended from the data source formats, the transport protocols to backend servers via standard interfaces.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-models&quot;&gt;Benchmark Models&lt;&#x2F;h3&gt;
&lt;p&gt;The concept, &lt;code&gt;benchmark model&lt;&#x2F;code&gt;, has been proposed to the core of OIDBS extensions. A benchmark model is used for grouping different benchmark dataset and its corresponding data-gens, schemas, queries.&lt;&#x2F;p&gt;
&lt;p&gt;In the first launch of JoinBase and OIDBS, two models - &#x27;nyct_lite&#x27; and &#x27;nyct_strip&#x27; are benched: &lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;model name&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;model dataset size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;description&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;how to get&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct_lite&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;10906860 rows&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;New York City Dataset used in official Timescale &lt;br&#x2F;&gt; (compressed in one 424MB file)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.timescale.com&#x2F;timescaledb&#x2F;latest&#x2F;tutorials&#x2F;nyc-taxi-cab&#x2F;&quot;&gt;Timescale Docs&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct_strip&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1000000000 rows&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Extended 1-billion-row New York City Dataset with stripped columns&lt;br&#x2F;&gt; (compressed in 13GB files)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mediafire.com&#x2F;folder&#x2F;4xaot2rywzyd7&#x2F;nyct_strip&quot;&gt;download pre-made from mediafire&lt;&#x2F;a&gt; &lt;br&#x2F;&gt; or &lt;br&#x2F;&gt; prepare from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;toddwschneider&#x2F;nyc-taxi-data&quot;&gt;this github project&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.1 OIDBS models introduction &lt;p&#x2F;&gt;
&lt;p&gt;These two models are derived from official, real-world &lt;a href=&quot;https:&#x2F;&#x2F;www1.nyc.gov&#x2F;site&#x2F;tlc&#x2F;about&#x2F;tlc-trip-record-data.page&quot;&gt;New York city dataset&lt;&#x2F;a&gt;. More about why these two models proposed could be seen in &lt;a href=&quot;&#x2F;benchmark&#x2F;#benchmark-model&quot;&gt;the JoinBase&#x27;s benchmark page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s watch a simple example about how to use OIDBS to benchmark the throughput of the latest Mosquitto release in minutes. This video is also a great, quick-start demo for how to use the Mosquitto with its own client.&lt;&#x2F;p&gt;
&lt;div align=&quot;center&quot; class=&quot;video-container&quot;&gt;
&lt;iframe class=&quot;video&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Y3ETIbGcZ6I?start=1&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p align=&quot;center&quot;&gt; Video: Quick Start to OIDBS &lt;p&#x2F;&gt;
&lt;p&gt;From the result of this demo, we can see that the performance of the forward throughput of the current Mosquitto release in WSL2(Ubuntu) with one-pub-one-sub is 10906860 messages &#x2F; 43.48 seconds ~= 250K mps or 1.6GB &#x2F; 43.48 seconds ~= 36MB(in csv format)&#x2F;s.&lt;&#x2F;p&gt;
&lt;p&gt;However, the 250k messages&#x2F;s with localhost is not good because one-pub-one-sub means the concurrency of connections is one. More importantly, we must point out that, the Windows environment is not suitable for benchmarking a MQTT broker, not mention that WSL2 is essentially a virtual machine. Here, we just show how easy to use the OIDBS benchmark. Because there is no difference between Linux and Windows WSL2 in the workflow. For non-production usages, this Windows setup is still acceptable.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;one-more-thing&quot;&gt;One More Thing&lt;&#x2F;h1&gt;
&lt;p&gt;Finally, we are proud to point out that, for the same 1 connection concurrency condition, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&quot;&gt;our JoinBase&lt;&#x2F;a&gt; is still 30% faster than that of Mosquitto. But please note that, in JoinBase, we do many many heavy ultra works, including message parsing, message transferring, data computing and storing. In the near future, We will demo that, under the extreme pressure of OIDBS, the overwhelming performance advantage of JoinBase over the existing mainstream MQTT brokers, and welcome everyone to &lt;a href=&quot;&#x2F;request&quot;&gt;request our free distribution&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;A new TPCx-IoT inspired benchmark model will be released soon. Watch our communities:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;oidbs&quot;&gt;OIDBS community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;JoinBase&quot;&gt;JoinBase community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>TinyWild: JoinBase Makes Wild IoT in Your Hand</title>
		<published>2022-10-16T12:00:00+00:00</published>
		<updated>2022-10-16T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/tinywild/" type="text/html"/>
		<id>https://joinbase.io/blog/tinywild/</id>
		<content type="html">&lt;h1 id=&quot;problems-and-challenges-in-the-wild&quot;&gt;Problems and Challenges in The Wild&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;wildlife.jpg&quot; alt=&quot;wildlife&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;The wild without a reliable internet connection&lt;p&#x2F;&gt;
&lt;p&gt;Many wild ecosystems do not have good network connections, and it is difficult for data analysis systems that rely on the cloud to work well in such wildlife-rich scenarios. Furthermore, such cloud-based systems are usually so expensive that wildlife researchers or institutions cannot afford.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;iot-devices&quot;&gt;IoT Devices&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;edge-dev-kit&quot;&gt;Edge Dev Kit&lt;&#x2F;h3&gt;
&lt;p&gt;In the data stack, a SenseCap K1100 kit is used. We use two modules from this kit:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Wio terminal: it can be seen as a handheld data hub with a visualization interface, which can manage various sensor modules and even display simple sensor data charts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Grove AI module: it provides TinyML-based wildlife recognition in the TinyWild.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;grove-vision-ai-for-animals-detection&quot;&gt;Grove Vision AI for Animals Detection&lt;&#x2F;h3&gt;
&lt;p&gt;This is a very great but challenging task. On-the-edge AI has a profound impact on the intelligence in the wild, because there is no good network in the wild to connect to cloud services with unlimited computing power.&lt;&#x2F;p&gt;
&lt;p&gt;At present, there is not much public research on the edge AI for wildlife or animals. Let us do a deep customization for this tasks:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;animal_80_dataset.jpg&quot; alt=&quot;wildlife&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Animal-80 dataset&lt;p&#x2F;&gt;
&lt;p&gt;One of the few publicly available animal datasets - Animals Detection Images Dataset from Kaggle (called &amp;quot;animials-80&amp;quot; dataset ) has been used. It contains 80 animals in 9.6GB images, and should be great enough for common animal recogization task.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prepare images and lables for Yolov5 training&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to the Kaggle&#x27;s working, we do not need to do labeling ourself. But the original label format in the animals-80 is not Yolov5 format. A preparation work has been carried by me on it. The core part is the preprocessing function shown above. Please the later Code section for more. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Training&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, I don&#x27;t have enough resources to do a full training on full 9.6GB training. So, a picked subset of animal-80 dataset has been chosen. We use a 24-core Xeon SP to do the training using above the commands got from offical example.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;15-animal-kinds training&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;results_15.jpg&quot; alt=&quot;wildlife&quot; class=&quot;img-fluid&quot;&gt;
 &lt;p align=&quot;center&quot;&gt;Training result for 15-animal-kinds&lt;p&#x2F;&gt;
&lt;p&gt;Firstly, we try train a model with 15 animal kinds. However, after two hours (Yes, it proves again that Don&#x27;t use CPU to train even it is a top Xeon SP), the final recognition effect is found to be very poor. You can see the main metrics are very low: the precision is 0.6, the recall and mAP_0.5 are just around 0.3. In fact, this result is close to not working.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;4-animal-kinds training&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;results_4.jpg&quot; alt=&quot;wildlife&quot; class=&quot;img-fluid&quot;&gt;
 &lt;p align=&quot;center&quot;&gt;Training result for 4-animal-kinds&lt;p&#x2F;&gt;
&lt;p&gt;Let&#x27;s reduce the types of recognized animals to four: spider, duck, magpie and butterfly, which of course are the most common animals in a suburban wild area.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, the recall and mAP_0.5 are upward to around 0.6. Not too bad. We will see the result in the late TinyWild&#x27;s Wildlife Survey.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;joinbase-as-no-coding-on-the-edge-iot-data-stack&quot;&gt;JoinBase as No-coding On-the-Edge IoT Data Stack&lt;&#x2F;h1&gt;
&lt;p&gt;The core of TinyWild is, an free on-the-edge IoT data stack - JoinBase.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, it is impossible to run MQTT broker + database + no-coding visualization at one resource constrained edge. JoinBase just comes as a game changer.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike existed IoT for wild solutions, with the help of JoinBase&#x27;s edge-cloud-in-one architecture, the TinyWild gives out a wildlife diversity real-time monitoring and analysis system reference implementation in low cost, high availability and great scalability, from UI to data analysis on the edge.&lt;&#x2F;p&gt;
&lt;p&gt;All done in the wild. No network connection to cloud any more needed for data analysis, even if you are in the African savannah to observe the rhinoceros. Our TinyWild system is especially suitable for real-world wildlife research.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pack-all-being-the-tinywild&quot;&gt;Pack All Being the TinyWild&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;tinywild.jpg&quot; alt=&quot;tinywild&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;TinyWild in 1&#x2F;4-palm Size&lt;p&#x2F;&gt;
&lt;h3 id=&quot;server-side-coding&quot;&gt;Server Side Coding&lt;&#x2F;h3&gt;
&lt;p&gt;The JoinBase data stack used by TinyWild is a all-in-one&lt;&#x2F;p&gt;
&lt;p&gt;We just write a SQL schema to create a table in the JoinBase like you do it in the your traditional database:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span&gt;iot_into_the_wild.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sensors&lt;&#x2F;span&gt;&lt;span&gt; (
&lt;&#x2F;span&gt;&lt;span&gt;  ts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  light Int16,
&lt;&#x2F;span&gt;&lt;span&gt;  sound Int16,
&lt;&#x2F;span&gt;&lt;span&gt;  imu_x Int16,
&lt;&#x2F;span&gt;&lt;span&gt;  imu_y Int16,
&lt;&#x2F;span&gt;&lt;span&gt;  imu_z Int16,
&lt;&#x2F;span&gt;&lt;span&gt;  animal String,
&lt;&#x2F;span&gt;&lt;span&gt;  confidence Int8
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;PARTITION BY yyyymmdd(ts);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, it is enough to start to service device messagings, no more codes. More usages about JoinBase could be seen in its own website.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-side-coding&quot;&gt;Client Side Coding&lt;&#x2F;h3&gt;
&lt;p&gt;In the client side, we change SenseCap&#x27;s official no-coding tooling SenseCraft to make Wio termial to work with an edge data stack.&lt;&#x2F;p&gt;
&lt;p&gt;Three main contributions are done in the TinyWild development, compared to the official version of SenseCraft:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Dynamic sensor-join-in&#x2F;out for a wide database table has been supported.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;MQTT and Sampler thread event loop has been enhanced.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Properly calibrated realtime clock has been supported via RTC and rpcWiFi libray.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;More details could be seen in the related repo in reference.&lt;&#x2F;p&gt;
&lt;p&gt;After main coding done, TinyWild is ready for using. Finally, let recap the size of TinyWild parts:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Devices&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Size&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Wio Terminal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;72mm * 57mm * 12mm&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;SBC - Rock Pi S&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;42mm * 42mm&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Solar Charger&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;30.5cm * 18cm&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The total size of TinyWild is 305mm x 180mm by the largest part - solar charger, of which the size is just to that of a book.&lt;&#x2F;p&gt;
&lt;p&gt;That is why it named: Tiny. Let&#x27;s go to Wild!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wildlife-survey-in-the-wetland-park&quot;&gt;Wildlife Survey in the Wetland Park&lt;&#x2F;h1&gt;
&lt;p&gt;For evaluating the TinyWild, I go to the country park to complete a wildlife survey.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;location&quot;&gt;Location&lt;&#x2F;h3&gt;
&lt;p&gt;We start from the wetland lake in the center of park but keep on running till we&#x27;re back where we started in the entrance of the park.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;continuous-monitoring&quot;&gt;Continuous Monitoring&lt;&#x2F;h3&gt;
&lt;p&gt;The continuous monitoring is done by running plain SQL queries. JoinBase provides a trial free cross-platform frontend for all users to allow periodically running queries and show then as dynamic tables or charts.&lt;&#x2F;p&gt;
&lt;p&gt;The monitoring queries running in TinyWild are as following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(ts) as number_of_records &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iot_into_the_wild&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sensors&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; animal,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(animal) as number_of_animal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iot_into_the_wild&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;group by&lt;&#x2F;span&gt;&lt;span&gt; animal;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(animal) as number_of_highly_true_ducks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iot_into_the_wild&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; animal = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Duck&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; and confidence &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(light) as number_of_great_sunlight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iot_into_the_wild&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; light &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;900&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;(light) as number_of_near_lightless &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;iot_into_the_wild&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sensors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; light &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;static-observation-on-duck&quot;&gt;Static observation on Duck&lt;&#x2F;h3&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;duck_2.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Static observation on duck in the lakeside&lt;p&#x2F;&gt;
&lt;p&gt;There are wild ducks (mallards) in the lake. To test the static recognition performance of Grove AI module, the camera is been pinned to lakeside for around half an hour via a tripod. See more results below.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;data-analysis-to-the-wildlife-survey&quot;&gt;Data Analysis to the Wildlife Survey&lt;&#x2F;h1&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;tinywild_2.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;JoinBase powered TinyWild goes into the wild&lt;p&#x2F;&gt;
&lt;p&gt;It is time to evaluate the performance of Grove AI and whole TinyWild system&lt;&#x2F;p&gt;
&lt;h3 id=&quot;grove-ai-for-wildlife-recognition&quot;&gt;Grove AI for Wildlife Recognition&lt;&#x2F;h3&gt;
&lt;p&gt;In the basic conclusion of this wildlife survey, for individual identification, it is not particularly ideal. But, for survey, the qualitative information collected is effective.&lt;&#x2F;p&gt;
&lt;p&gt;let&#x27;s observe the whole survey group-by (in the third picture above) query:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;wild_sql.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Group-by SQL query result of the whole-survey monitoring sensoring values&lt;p&#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most of animals are &amp;quot;Unkown&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Because it is found hat the outputs of Grove AI have a great possiblity with the confidence 100 (100% for short) even for its own built-in (people detection) model. This is impossible. So we treat all confidence &amp;gt;= 100 detection as &amp;quot;Unkown&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Empty &amp;quot;animal&amp;quot; in the results&lt;&#x2F;p&gt;
&lt;p&gt;This stems from the logics of database storage model and that of SenseCap&#x27;s no-coding SenseCraft in that our TinyWild&#x27;s Wio terminal codes are modified from it: the data logic will send data in a timer interval then clear the input buffer, if the buffer can not filled by sensors then for single point, you can easily ignore it but for a row of points like show in the TinyWild database table, we still need to something here.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So, change to see the records with high confidence, here &amp;gt; 75 in the query:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;high_confidence_wild_sql.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Group-by SQL query result of high confidence classification&lt;p&#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;high_confidence_rec_res.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Charting of high confidence classification&lt;p&#x2F;&gt;
&lt;p&gt;Butterflies are relatively outstanding but without Magpies that have seen many times in the park.
This seems the Magpies are been recognized as the butterflies. But what they have in common is that, they often fly in the air.&lt;&#x2F;p&gt;
&lt;p&gt;Duck are observed in the lake side. In the records, we exactly found that the Grove AI works greatly for nearby animal detection like we done in lakeside: we got four counts when suddenly three ducks swims into the scope of camera in a relative static positioning.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;continuous-collection&quot;&gt;Continuous Collection&lt;&#x2F;h3&gt;
&lt;p&gt;For the great portable and mobility of the TinyWild, let&#x27;s look at another case: continuous light sensoring in the edge:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;tinywild&#x2F;light_changes_in_last_minutes.jpg&quot; alt=&quot;wild joinbase sql&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt;Charting of continuous light sensoring in the whole &lt;p&#x2F;&gt;
&lt;p&gt;When I went back ( @ 17:09 ) after survey at the lakeside done, I go through a big tree road ( after 16-17mins according to the recoding ). The above figure is the plot of light sensor values at the last 22 mins of the return journey.&lt;&#x2F;p&gt;
&lt;p&gt;The TinyWild completely and accurately recorded of the entire changes of light sensors while the entire cameraman is moving all the time, many times the network is poor.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cost-analysis&quot;&gt;Cost Analysis&lt;&#x2F;h1&gt;
&lt;p&gt;TinyWild is tiny and wild(no cloud needed). It is also cheap:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Devices&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Size&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;SenseCap K1100&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;$0 (free give-out from Seeed)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;SBC - Rock Pi S&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;$15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Solar Charger&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;$38&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The parts of observation endpoints like iPad or laptop are not included here. Because they are replaceable with any have-screen endpoints with the web access capability. For example, an unused phone. I have three unused phones and one unused pad...&lt;&#x2F;p&gt;
&lt;p&gt;The total cost of TinyWild is $53, and you can reduce the solar charger to a much cheaper common charger if you are not working too long in the wild.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;outlook&quot;&gt;Outlook&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Edge LoRaWan Gateway&lt;&#x2F;p&gt;
&lt;p&gt;The work related to adding LoRaWan gateway to JoinBase server and TinyWild is in progress. We promise to have support for LoRa Gateways in a few weeks. &lt;&#x2F;p&gt;
&lt;p&gt;After that, JoinBase will be the world&#x27;s first data stack with MQTT and LoRaWan dual-gateway supporting, and can uniquely run on $15 SBC with a 3MB binary at the same time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;More Accurate Edge AI&lt;&#x2F;p&gt;
&lt;p&gt;For the recognition of a small-kinds, short-range, low-speed objects, Grove AI has shown good results. However, if let Grove AI module to interfence with 15-animal-kinds model, it is found the runtime latency is larger than 1ms. And it is alsos observed that the overheating hot loop may cause the module to hang.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So, to make better use of Grove AI module well, more community practices are needed.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h1&gt;
&lt;p&gt;[1] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;yolov5-swift&quot;&gt;EdgeML codes in this article&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;tinywild&quot;&gt;TinyWild open-source repo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[3] &lt;a href=&quot;https:&#x2F;&#x2F;www.hackster.io&#x2F;surfeit&#x2F;tinywild-make-wild-iot-in-your-hand-729732&quot;&gt;Article on Hackster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Quick Review for Free Database Cloud Services on Real World IoT Dataset</title>
		<published>2022-06-27T12:00:00+00:00</published>
		<updated>2022-06-27T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/clouds-quick-reivew/" type="text/html"/>
		<id>https://joinbase.io/blog/clouds-quick-reivew/</id>
		<content type="html">&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few prerequisites for this quick review:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The cloud service or demo should be &lt;strong&gt;free&lt;&#x2F;strong&gt;. Common users have no budget to provide a credit card to complete any review. On the other hand, only databases with excellent performance can afford permanently free tiers in cloud services or demos.&lt;&#x2F;li&gt;
&lt;li&gt;The database must support the &lt;strong&gt;SQL compatible&lt;&#x2F;strong&gt; syntax. The cost of learning a new paradigm for the common user is very high. Every paradigm has pitfall, but adhoc paradigm goes into no help when a pitfall happens.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Easy enough&lt;&#x2F;strong&gt;. We are database experts. Hence, we propose a &lt;code&gt;15-minute rule&lt;&#x2F;code&gt;: we stop reviewing at one database cloud service&#x2F;demo If the exploration process exceeds 15 minutes after registering.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;experiment&quot;&gt;Experiment&lt;&#x2F;h2&gt;
&lt;p&gt;In this experiment, we try the follow six databases:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Database&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Service or Demo&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Pricing&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Register Site or Docs&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;JoinBase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;full service with write + read&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;free tier forever&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct big + nyct lite&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.joinbase.io&#x2F;signup&quot;&gt;register&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Timescale&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;full service with write + read&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;free 30-day trial&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct lite&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.timescale.com&#x2F;timescale-signup&quot;&gt;register&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ClickHouse&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;demo with read only&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct big&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;clickhouse.com&#x2F;docs&#x2F;en&#x2F;getting-started&#x2F;playground&#x2F;&quot;&gt;docs&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;?DB&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;demo with read only&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;nyct big&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;InfluxDB&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;demo with read only&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud2.influxdata.com&#x2F;signup&quot;&gt;register&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;CockroachDB&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;full service in serverless&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;free tier forever&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;lp&#x2F;serverless&#x2F;&quot;&gt;register&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.1 Tried Database Cloud Services or Demos &lt;p&#x2F;&gt;
&lt;p&gt;Some notes on Tab.1:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Only four cloud services or demos are reviewed in the end: JoinBase, Timescale, ClickHouse, and ?DB.&lt;&#x2F;li&gt;
&lt;li&gt;Only one result of ?DB is shown below. ?DB claims that it is &amp;quot;the fastest open source time series database&amp;quot; but the tests on its own demo server show the opposite. In fact, almost all slightly non-trivial SQL queries for its 1.6-billion-row trips time out. To avoid disputes, we do not display the name of this database. Here, the suggestion for all users is, &amp;quot;Talk is cheap. Benchmark yourself.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Both InfluxDB Cloud and CockroachDB Cloud Serverless are tried. But we don&#x27;t succeed in finding a way to review them within the above planned time. For InfluxDB, it has its own adhoc schema way. We have not enough time (and interest) to learn. For CockroachDB, there is no simple way to ingest a csv in my local fs to remote serverless db server.&lt;&#x2F;li&gt;
&lt;li&gt;More about kinds of nyct dataset could be seen &lt;a href=&quot;https:&#x2F;&#x2F;joinbase.io&#x2F;benchmark&#x2F;#benchmark-model&quot;&gt;in this article&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Database Services&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Setup&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;JoinBase Cloud Preview&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;32 ~ 96 vCPUs (not guaranteed)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Timescale Cloud&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;32 vCPUs, 128GB RAM&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ClickHouse Playground&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;96 vCPUs (guessed)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.2 Setup of Reviewed Databases&lt;p&#x2F;&gt;
&lt;p&gt;Some notes on Tab.2:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The setup of ClickHouse&#x27;s playground server is not public, and so does JoinBase. Our JoinBase cloud service is powered by the multi-tenant version of JoinBase, which is also set up on a single instance now. We will adjust vCPUs  according to the number of active users. &lt;&#x2F;li&gt;
&lt;li&gt;Timescale cloud&#x27;s biggest instance for free trial is 32 vCPUs, 128GB RAM.&lt;&#x2F;li&gt;
&lt;li&gt;Again, this quick review just does a quantitative analysis.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;According to our 15-minute rule, only three database services or demos are reviewed.&lt;&#x2F;p&gt;
&lt;!-- ![Review for Three Database Cloud Services or Demos](&#x2F;imgs&#x2F;blog&#x2F;clouds_quick_review&#x2F;review.gif) --&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;clouds_quick_review&#x2F;review.gif&quot; alt=&quot;review of three cloud services&quot; class=&quot;img-fluid&quot;&gt;
&lt;br&#x2F;&gt;
&lt;p align=&quot;center&quot;&gt; Fig.1 Reviewing Three Database Cloud Services or Demos&lt;p&#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;blog&#x2F;clouds_quick_review&#x2F;xdb.png&quot; alt=&quot;review of three cloud services&quot; class=&quot;img-fluid&quot;&gt;
&lt;p align=&quot;center&quot;&gt; Fig.2 ?DB shows ridiculous run times for trivial conditions&lt;p&#x2F;&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;We divide the comparisons into two groups. Because ClickHouse Playground is read only, and 1-billion-row nyct_strip dataset is too big to import into Timescale Cloud for its slow writing performance. We can not use a single dataset for all services or demos. But smart readers can reason their own conclusions if the database query performance can be scaled with the size of the data.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;JoinBase Cloud Preview vs Timescale Cloud on nyct_lite dataset (the elapsed time is in the unit of milliseconds)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Database Service&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q1&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q2&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset Size (rows)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;JoinBase Cloud Preview&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0.78&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;4.45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;10M&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Timescale Cloud&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;650.739&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;840.430&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;10M&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Timescale:JoinBase Ratio&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;834&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;189&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1:1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.3 JoinBase Cloud Preview vs Timescale Cloud&lt;p&#x2F;&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;JoinBase Cloud Preview vs ClickHouse Playground on nyct_strip dataset (the elapsed time is in the unit of second)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Database Service&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q1&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q2&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q3&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Q4&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Dataset Size (rows)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;JoinBase Cloud Preview&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0.168&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0.259&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0.355&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1.126&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1 billion&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ClickHouse Playground&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1.664&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1.659&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1.714&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2.431&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.46 billion&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ClickHouse:JoinBase Ratio&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;9.9&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;6.4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;4.8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;2.16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.4 JoinBase Cloud Preview vs ClickHouse Playground&lt;p&#x2F;&gt;
&lt;p&gt;Obviously, JoinBase surpasses other services in the performance of the tested queries. &lt;&#x2F;p&gt;
&lt;p&gt;Here, the Q4 query for JoinBase and ClickHouse, in fact, is not &amp;quot;apple-to-apple&amp;quot;. JoinBase uses String type for vendor_id, cab_type and passenger_count three columns but ClickHouse uses Enum8, which has the obvious optimization to speedup. JoinBase, indeed, has Enum like type. But here, we would like to emphasize our generality and the unique superiority of the engine algorithm. JoinBase is implemented so fast that you can use it without caring performance downgrade.&lt;&#x2F;p&gt;
&lt;p&gt;More queries and notes are seen in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;review_free_cloud_services&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s do a quick rating: from 0 to 5, 5 is the best, and 0 is the worst:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Database Service&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Ease of Use&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Completeness of &lt;br&#x2F;&gt;Service&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Analytical Query Performance&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Built-in IoT Domain Capability&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;JoinBase Cloud Preview&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Full&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Timescale Cloud&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Full&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ClickHouse Playground&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Demo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;?DB Demo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Demo&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;InfluxDB Cloud&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Full&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;CockroachDB Cloud&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Full&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;n&#x2F;a&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt; Tab.5 Final Ratings for Reviewed Database Services&lt;p&#x2F;&gt;
&lt;ol&gt;
&lt;li&gt;For Timescale cloud, in fact, the first user experience is a little tricky: the service password was wanted in notes, but we found nothing till the service created (or we miss something?). Finally, we found a workaround that the password could be changed in the service settings.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;Ease of Use&lt;&#x2F;code&gt;, JoinBase is the cloud service shipped with SQL workbench. You can experience JoinBase immediately after registering without any installation. Timescale cloud and ClickHouse demo are headless so that you need install consoles for going on.&lt;&#x2F;li&gt;
&lt;li&gt;Built-in IoT domain capability is the unique features of JoinBase now. So nothing is done in this review. Feel free to &lt;a href=&quot;&#x2F;docs&#x2F;getting-started&#x2F;introduction&#x2F;&quot;&gt;explore these features&lt;&#x2F;a&gt; in our free JoinBase Cloud Preview.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This experiments is great: it is much much easier to review a cloud service or demo than a formal benchmark with many codes and setups. &lt;&#x2F;p&gt;
&lt;p&gt;Finally, all reviews or benchmarks are biased. It is suggested that users should reproduce yourself. Welcome to &lt;a href=&quot;https:&#x2F;&#x2F;cloud.joinbase.io&#x2F;signup&quot;&gt;register our free JoinBase Cloud Preview&lt;&#x2F;a&gt; for reproducing!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hello, JoinBase!</title>
		<published>2022-06-09T12:00:00+00:00</published>
		<updated>2022-06-09T12:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/blog/hello-joinbase/" type="text/html"/>
		<id>https://joinbase.io/blog/hello-joinbase/</id>
		<content type="html"></content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2021-11-18T08:00:00+00:00</published>
		<updated>2021-11-18T08:00:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/getting-started/introduction/" type="text/html"/>
		<id>https://joinbase.io/docs/getting-started/introduction/</id>
		<content type="html">&lt;h2 id=&quot;quick-start&quot;&gt;Quick Start&lt;&#x2F;h2&gt;
&lt;p&gt;Start to use JoinBase in three minutes! &lt;a href=&quot;&#x2F;docs&#x2F;getting-started&quot;&gt;Quick Start →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-further&quot;&gt;Go Further&lt;&#x2F;h2&gt;
&lt;p&gt;Start to understand more about JoinBase. &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;concept&#x2F;&quot;&gt;Concept →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;join-the-community&quot;&gt;Join the Community&lt;&#x2F;h2&gt;
&lt;p&gt;Join our open product community. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;JoinBase Community →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Advanced Features</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/advanced/" type="text/html"/>
		<id>https://joinbase.io/docs/references/advanced/</id>
		<content type="html">&lt;p&gt;The latest integration release and more advanced or cutting-edge features could be obtained in the community.&lt;&#x2F;p&gt;
&lt;p&gt;Join &lt;a href=&quot;&#x2F;community&quot;&gt;our community&lt;&#x2F;a&gt; and you can request any help at the community.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Concepts</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/concept/" type="text/html"/>
		<id>https://joinbase.io/docs/references/concept/</id>
		<content type="html">&lt;p&gt;In JoinBase, we hope that users can use the database very well just by some simple intuitions and experiences. We only expose the minimal concepts that must be known by users in current technical conditions. Apart from this, you don&#x27;t need any other data field knowledge to use JoinBase well.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sql&quot;&gt;SQL&lt;&#x2F;h4&gt;
&lt;p&gt;In JoinBase, you are only required to understand the &lt;strong&gt;plain SQL&lt;&#x2F;strong&gt;. Considering the declarative nature of SQL, as design, you basically only need intuition to use JoinBase well. &lt;&#x2F;p&gt;
&lt;p&gt;Also based on this, for SQL, we do not plan to copy it all into JoinBase&#x27;s language. We will make compatible with its most intuitive parts, discard the unintuitive parts, and expand the parts that it has not yet done, but should be done simpler and more intuitive as a great bigdata analysis tools.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;partition&quot;&gt;&lt;a id=&quot;partition&quot;&gt;&lt;&#x2F;a&gt; Partition&lt;&#x2F;h4&gt;
&lt;p&gt;For the IoT scenario, the data generated by devices can be regarded as endless. Therefore, putting all the data into one place is neither necessary nor practical. &lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;partition&lt;&#x2F;code&gt; in JoinBase is just a part of data or records which is sliced by your specified partition expression on a column or a list of columns when creating the schema of the table.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, a &lt;code&gt;partition&lt;&#x2F;code&gt; in JoinBase act as an unit of data skipping for reducing query&#x27;s scanned dataset. By skipping un-interested partitions, you can make your query lighting fast even the total dataset in the database is unlimited. We have carefully built an engine that can resist most of the pathological partition shapes. But wrong partition schemas may still greatly affect query performance. Because the great real-world flexibility on the top of the JoinBase&#x27;s general SQL model, we think it is better to expose the concept of &lt;code&gt;partition&lt;&#x2F;code&gt; to users currently.&lt;&#x2F;p&gt;
&lt;p&gt;Related to &lt;code&gt;partition&lt;&#x2F;code&gt;, the following concepts you should know to create a correct schema,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Partition Keys&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Partitioning of a table should be based on the table&#x27;s data. Commonly you use one or multiple columns in the table. These selected columns are the so-called &lt;code&gt;partition keys&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, we only support the single column as a partition key. And the value of partition must be a unsigned 64bit integer. In the future, we will support the multiple columns as a compound partition key.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Partition Expression&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Sometimes, it is not  convenient to just use the column’s value itself. Instead, it is better to use the derived value from the column. &lt;&#x2F;p&gt;
&lt;p&gt;For example, it is natural to partition the time series table by a kind of time unit, like a day. But you may have only a &lt;code&gt;Timestamp&lt;&#x2F;code&gt; type column in your table.  There are two ways for solving this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You add a new column like &lt;code&gt;date&lt;&#x2F;code&gt; as the partition key to represent the day partition granularity.&lt;&#x2F;li&gt;
&lt;li&gt;It will be easier if you just tell the databases how to calculate the partition key (in the day partition granularity) from the existing timestamp. This is the so-called &lt;code&gt;partition expression&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For performance and security reasons, we support several common functions (mainly date-time related) to be used as partition expressions. See the language reference page for more detail. &lt;&#x2F;p&gt;
&lt;p&gt;Currently, you may combine two above ways if you want one much complex partition schema. We will continue to improve the partition expressions support.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Configuration</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/conf/" type="text/html"/>
		<id>https://joinbase.io/docs/references/conf/</id>
		<content type="html">&lt;p&gt;In JoinBase, we hope to that was extremely complex and difficult to control in the traditional database system or big data platform.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;philosophy-of-joinbase-s-config&quot;&gt;Philosophy of JoinBase&#x27;s Config&lt;&#x2F;h3&gt;
&lt;p&gt;Config should be done in:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;all-in-one place&lt;&#x2F;li&gt;
&lt;li&gt;show main configurable items that the system exposes to users &lt;&#x2F;li&gt;
&lt;li&gt;self-explained&lt;&#x2F;li&gt;
&lt;li&gt;reasonable default value&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can use the above standards to configure JoinBase in the $JoinBase_HOME&#x2F;base.conf (&lt;a href=&quot;https:&#x2F;&#x2F;toml.io&#x2F;en&#x2F;&quot;&gt;toml&lt;&#x2F;a&gt; format file).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;noteworthy&quot;&gt;Noteworthy&lt;&#x2F;h3&gt;
&lt;p&gt;The only item in conf file you should change in the first time is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;directories of your data, schema, log and WAL(Write-Ahead Logging).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Because JoinBase is a database system. It will definitely save users&#x27; data into some places of users&#x27; disks. Therefore, we believe, it is best to let users explicitly specify and reserve a suitable space for the database, from both the privacy and system work&#x27;s perspectives.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Glossary</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/glossary/" type="text/html"/>
		<id>https://joinbase.io/docs/references/glossary/</id>
		<content type="html">&lt;h4 id=&quot;end-to-end-database&quot;&gt;End-to-end Database&lt;&#x2F;h4&gt;
&lt;p&gt;The existing databases or data systems require its own clients or intermediate processing pipelines or preprocessed formats to make data correctly written into the databases. In contrast, the end-to-end IoT database, like JoinBase, supports data (a.k.a. domain messages)to be directly written to the end of data sink (a.k.a. the database) from the end of data production sources (a.k.a. devices).&lt;&#x2F;p&gt;
&lt;p&gt;An end-to-end database is proposed, by us, as an out-of-the-box database for non-professional domain users. The end-to-end database evolves through user orientated characteristics, not based on technical features.&lt;&#x2F;p&gt;
&lt;p&gt;More formally, &lt;strong&gt;an end-to-end database meets the following &lt;sup&gt;3&lt;&#x2F;sup&gt;E standards&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Edge native&lt;&#x2F;strong&gt;. For IoT domain, direct message ingestion from end devices to end databases without any intermediate components involved.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Edge elasticity&lt;&#x2F;strong&gt;. For IoT domain, both cloud end and edge end are deployable for main three stream CPU architectures without any functionality compromise.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Edge friendly&lt;&#x2F;strong&gt;. All necessary pipelines are provided for end users without any DBA required.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;iot-native&quot;&gt;IoT Native&lt;&#x2F;h4&gt;
&lt;p&gt;In JoinBase, MQTT messages becomes the first-class citizen of database. We support ten million concurrent physical connections from massive IoT (Internet of Things) devices to ingest near ten million one-by-one messages in one node. The whole database is built and optimized for unlimited IoT bigdata. &lt;&#x2F;p&gt;
&lt;p&gt;In all databases, we know the internet of things best.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;devops-free&quot;&gt;DevOps Free&lt;&#x2F;h4&gt;
&lt;p&gt;In JoinBase, we carefully craft a dedicate database for unlimited IoT bigdata. You don&#x27;t need a dedicated JoinBase administrator (a.k.a. DBA) to maintain the JoinBase. The system is designed to work in a highly fault-tolerant manner, and can automatically recover from most errors. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;iot-natural-acid&quot;&gt;IoT Natural ACID&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ACID&quot;&gt;ACID&lt;&#x2F;a&gt; (atomicity, consistency, isolation, durability) is a set of properties of database transactions to guarantee that the data system can work properly in all situations. &lt;&#x2F;p&gt;
&lt;p&gt;Usually databases use some specific statements to group multiple statements as a single atomic unit, a.k.a. transaction. It is obvious that， there is a significant performance cost to supporting arbitrary transactions in general data systems. &lt;&#x2F;p&gt;
&lt;p&gt;In JoinBase, we support a subset of general ACID transaction, &lt;code&gt;IoT Natural ACID&lt;&#x2F;code&gt; transaction called by us: the single-row write transaction in read committed isolation level. Every single-row message written into JoinBase is taken as an implicit transaction. And JoinBase does not provide any explicit transaction control statement now. The IoT Natural ACID enables a special consistency model: causal consistency. That is, we guarantee the messages and their data effect from the same client are in the order. So, if there are causalities in all kinds of IoT events, you can still make causal inferences based on data effects.&lt;&#x2F;p&gt;
&lt;p&gt;In the IoT domain, the messages from different clients are not related. So, it doesn&#x27;t make sense to provide complex composable transactions here. Although richer ACID options may be provided in the future, it is believed that IoT Natural ACID transaction as the default transaction behavior is the best choice for IoT domain users.&lt;&#x2F;p&gt;
&lt;p&gt;In JoinBase, one message may be mapped to one row or more rows by &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mapping&#x2F;#custom-mapping&quot;&gt;JSON array flattening&lt;&#x2F;a&gt;. But the message flattening is deterministic, so the single-row transaction model is still applied for the deterministic splitting rows.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>High Availability</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/ha/" type="text/html"/>
		<id>https://joinbase.io/docs/references/ha/</id>
		<content type="html">&lt;h2 id=&quot;asynchronous-replication&quot;&gt;Asynchronous Replication&lt;&#x2F;h2&gt;
&lt;p&gt;JoinBase has experimental support for the asynchronous primary-secondary replication. &lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;docs&#x2F;replication.png&quot; class=&quot;img-fluid&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt; Asynchronous Replication Diagram &lt;p&#x2F;&gt;
&lt;p&gt;The key here is, the data&#x2F;messgae&#x2F;write can only be sent to the primary node, but the query&#x2F;read can be sent to any one.&lt;&#x2F;p&gt;
&lt;p&gt;Compared with that of other databases, the asynchronous replication implementation of JoinBase has the following unique advantages：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Almost Zero Overhead&lt;&#x2F;p&gt;
&lt;p&gt;The secondary nodes have little performance impact on the primary, as long as the number of secondary nodes is not too crazy (for example, less than 1000 nodes).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Up-to-Sub-Second Latency&lt;&#x2F;p&gt;
&lt;p&gt;This makes out of sync data interval very tiny or no if your message ingestion frequency is not too crazy (for example, sub-second-frequency ingestion).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Scale-out-able Query Capabilities&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase makes platform-type users to expand their query capabilities without any worry. Note, our single-node primary has supported near ten-millions connections and messages per second. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;DevOps Free (of course)&lt;&#x2F;p&gt;
&lt;p&gt;Just config several parameters in your conf, all happens automatically.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;synchronous-replication&quot;&gt;Synchronous Replication&lt;&#x2F;h2&gt;
&lt;p&gt;It is believed that the JoinBase&#x27;s extreme performance asynchronous replication is enough for IoT domain users. However, in theory, the asynchronous replication can not guarantee 100% data safety. When a permanent failure for the primary node occurs (the primary node can not come back after some major failure), out of sync data data may be lost. &lt;&#x2F;p&gt;
&lt;p&gt;Please note, out of sync data data in non-permanent failures still survives greatly with the asynchronous replication. As an example, an AWS instance with EBS volume is practically considered to have no permanent failure.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase does not provide the synchronous replication option now. Because the synchronous replication causes orders of magnitude performance degradation, which most of databases will not tell you. And, for the IoT data, data durability failures in the very tiny probability (a.k.a., permanent failure case) are often tolerable. Please recall the design principle of the MQTT protocol.&lt;&#x2F;p&gt;
&lt;p&gt;If you really want the effect of synchronous replication, one MQTT messaging based solution proposed: dual&#x2F;multiple active primary runnings. That is, clients send multiple messages to dual&#x2F;multiple active primary nodes. For using this solution, the message&#x27;s QoS should be 1. JoinBase honors QoS 1, which reliably persists messages in the server side. &lt;&#x2F;p&gt;
&lt;p&gt;A new innovative clustering mechanism is in the progress for more elastic high availability guarantee options. Stay tunned!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>HTTP Interface</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/http/" type="text/html"/>
		<id>https://joinbase.io/docs/references/http/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;All TCP based interfaces supports two modes: plain or TLS, plain is ok for . But, generally, the TLS interface is recommended for production.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;primary&quot;&gt;Primary&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Query (Data Reading)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;http&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-http &quot;&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span&gt;GET &#x2F; or &#x2F;?param1=a&amp;amp;param2=2... 
&lt;&#x2F;span&gt;&lt;span&gt;[body: select&#x2F;show&#x2F;desc statement]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The path of a query must be &amp;quot;&#x2F;&amp;quot;. The parameters are optional. Now we support the following parameters:
database, output_layout and output_format, username, password.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Parameters&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;MQTT Message&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;database&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the name of database.&lt;br&#x2F;&gt; default value: default, &lt;br&#x2F;&gt; allowed values: n&#x2F;a&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;output_layout&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the memory layout of output.&lt;br&#x2F;&gt; default value: rowwise &lt;br&#x2F;&gt; allowed values:rowwise,columnwise&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;output_format&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the memory layout of output.&lt;br&#x2F;&gt; default value: rowwise &lt;br&#x2F;&gt; allowed values:json,csv&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;username&#x2F;password&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;the username&#x2F;password for authentication.&lt;br&#x2F;&gt; (We do not recommend using this method as the parameter might be logged by web proxy and cached in the browser)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Data ingestion (Data Writing)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;http&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-http &quot;&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span&gt;POST &#x2F;database&#x2F;table
&lt;&#x2F;span&gt;&lt;span&gt;[body: csv or json payload]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The path of a query must be a valid topic or topic alias. &lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;DDL(Data Definition Language)&#x2F;Schema Change&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;See more in the document of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;advanced&quot;&gt;advanced features&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Authentication&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The two simple authentication methods in the HTTP interface are supported:&lt;&#x2F;p&gt;
&lt;p&gt;a. Using ‘X-JoinBase-User’ and ‘X-JoinBase-Key’ headers. Example:&lt;&#x2F;p&gt;
&lt;p&gt;b. In the ‘user’ and ‘password’ URL parameters. (We do not recommend using this method as the parameter might be logged by web proxy and cached in the browser).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;The security philosophy of JoinBase is whitelist-based. So the authentication is the must in any interface.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Query&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-User: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-Key: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -X&lt;&#x2F;span&gt;&lt;span&gt; GET &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select 123&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json_pp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Desc table&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-User: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-Key: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -X&lt;&#x2F;span&gt;&lt;span&gt; GET &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;?database=abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;desc table t&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json_pp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Ingest data&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-User: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-Key: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -X&lt;&#x2F;span&gt;&lt;span&gt; POST &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;abc&#x2F;t&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3,4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5,6&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;predefined-query&quot;&gt;Predefined Query&lt;&#x2F;h2&gt;
&lt;p&gt;See more in the document of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;advanced&quot;&gt;advanced features&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Installation</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/install/" type="text/html"/>
		<id>https://joinbase.io/docs/references/install/</id>
		<content type="html">&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;plain-file&quot;&gt;Plain file&lt;&#x2F;h3&gt;
&lt;p&gt;JoinBase does not need to be installed. The JoinBase release is shipped in a compressed package. Just decompress it to any directory of your machine. Then, go that directory to use. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker-image&quot;&gt;Docker image&lt;&#x2F;h3&gt;
&lt;p&gt;If you prefer the Docker way, try JoinBase with the above simplest command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt;=host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P -d&lt;&#x2F;span&gt;&lt;span&gt; joinbase&#x2F;joinbase
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will start a JoinBase server wiht the default conf in a detached container by exposing all ports to your host.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;strong&gt;NOTE&lt;&#x2F;strong&gt; that JoinBase has no &lt;code&gt;default user&lt;&#x2F;code&gt; concept, you should setup a user before going ahead by the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --net&lt;&#x2F;span&gt;&lt;span&gt;=host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --entrypoint&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;joinbase&#x2F;base_admin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; joinbase&#x2F;joinbase create_user abc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just check the server by pinging with curl, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -v -s -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-User: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-Key: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -X&lt;&#x2F;span&gt;&lt;span&gt; GET &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;ping&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, note that all data and change are inside of the container for above quick commands. They may disappear when that container ternimated. For production use, you should customize JoinBase&#x27;s conf to use dedicated directories. A sample conf file named &amp;quot;base.conf&amp;quot; is provided with every release. Just dowload and customize it yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Operation system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Currently, JoinBase only supports Linux distributions with modern kernels, example, &lt;a href=&quot;https:&#x2F;&#x2F;releases.ubuntu.com&#x2F;20.04&#x2F;&quot;&gt;latest Ubuntu 20.04.4+ LTS&lt;&#x2F;a&gt;. Feel free to ask for help if you have problems on the running operation system. We are good at running latest kernels on several-dollar SBCs. (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Windows_Subsystem_for_Linux&quot;&gt;Windows WSL2 with latest kernel&lt;&#x2F;a&gt; also works greatly.)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Storage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For storage, there is no hard requirement. But if you want to achieve the leading performance, the SSD disk is recommended.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Processor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mainstream 64bit CPU architectures are supported(X86-64, ARM, RISC-V), and scaled from $6 ARMv8 SBC to AWS 384-core(z-series) instance.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, the x86-64v3 (AVX2+) version is available for public downloading. More other arch version downloads will come soon. We are also happy to provide kinds of optimized versions for any interesting processors and hardwares when users &lt;a href=&quot;&#x2F;request&quot;&gt;request&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Payload Mapping</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/mapping/" type="text/html"/>
		<id>https://joinbase.io/docs/references/mapping/</id>
		<content type="html">&lt;h2 id=&quot;payload&quot;&gt;Payload&lt;&#x2F;h2&gt;
&lt;p&gt;JoinBase supports two built-in kinds of payload in the body of HTTP&#x2F;MQTT message: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Comma-separated_values&quot;&gt;CSV&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JSON&quot;&gt;JSON&lt;&#x2F;a&gt;. Futhermore, via the mechanism of UDM(User Defined Mapping), JoinBase can support the arbitrary user defined mapping logic. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;mapping-mechanisms&quot;&gt;Mapping Mechanisms&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;automatic-mapping&quot;&gt;Automatic Mapping&lt;&#x2F;h4&gt;
&lt;p&gt;The automatic mapping is very simple and direct: &lt;strong&gt;the top-level JSON field name corresponds directly to the table column name.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;You do &lt;strong&gt;not need to provide any explicit mapping definition&lt;&#x2F;strong&gt;, if you can design one simple 1-1 mapping enabled message payload in advance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s see an example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Connect the test JoinBase server.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; psql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; test_db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Create a database and a simple table without any explicit mapping attribute.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_db&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_tab&lt;&#x2F;span&gt;&lt;span&gt;(ci8 Int8, cu64 Int64, cts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DateTime&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Write a corresponding data to the JoinBase default MQTT broker by Mosquitto tool &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#footnote&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;in CSV:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mosquitto_pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -t&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;test_db&#x2F;test_tab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1883&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-1,123456,2021-09-08T13:42:29+08:00&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;in JSON:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mosquitto_pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -t&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;test_db&#x2F;test_tab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1883&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;ci8&amp;quot;:-1,&amp;quot;cu64&amp;quot;:123456,&amp;quot;cts&amp;quot;:&amp;quot;2021-09-08T13:42:29+08:00&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Check the written data.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; test_tab;
&lt;&#x2F;span&gt;&lt;span&gt; ci8 |         cts         | cu64 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-----+---------------------+------
&lt;&#x2F;span&gt;&lt;span&gt;  -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;08 13&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span&gt; |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Batched message ingestion: payload in CSV supports multiple lines as multiple records into the table.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;rule-based-mapping&quot;&gt;Rule Based Mapping&lt;&#x2F;h4&gt;
&lt;p&gt;If you message payload design does not follow the default automatic mapping rule, you can explicitly specify your mapping logics via one &lt;strong&gt;mapping rule definition language&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The rule definition language is simple and &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc6901&quot;&gt;JSON Pointer&lt;&#x2F;a&gt; inspired.&lt;&#x2F;p&gt;
&lt;p&gt;The rule definition language is specified in the table attribute name &lt;code&gt;JSON_MAPPINGS&lt;&#x2F;code&gt; when you create the table schema. You can change the &lt;code&gt;JSON_MAPPINGS&lt;&#x2F;code&gt; attribute in the latter with &lt;code&gt;alter&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;Let see an example &lt;code&gt;JSON_MAPPINGS&lt;&#x2F;code&gt; attribute:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;JSON_MAPPINGS ci8 &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, cu64 &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;c&#x2F;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, cts &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;d&#x2F;1&#x2F;e&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the key points of the JSON_MAPPINGS table attribute:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The entry &lt;code&gt;ci8 &amp;lt;- &#x27;&#x2F;a&#x2F;b&#x27;&lt;&#x2F;code&gt; just defines a mapping from the JSON Pointer path pattern &lt;code&gt;&#x27;&#x2F;a&#x2F;b&#x27;&lt;&#x2F;code&gt; to the table column named &lt;code&gt;ci8&lt;&#x2F;code&gt;. That is, the value of column &lt;code&gt;ci8&lt;&#x2F;code&gt; will be extracted from the JSON message&#x27;s path &lt;code&gt;&#x27;&#x2F;a&#x2F;b&#x27;&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;If no mapping defined in this, it is still assumed the table column will be extracted via default mapping. &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Unlike a file system, the &amp;quot;&#x2F;&amp;quot; query in JSON Pointer does not identify the root. Instead, &amp;quot;&amp;quot; is the root and &amp;quot;&#x2F;&amp;quot; is the child of the root whose key is the empty string. Similarly, &amp;quot;&#x2F;xyz&amp;quot; and &amp;quot;&#x2F;xyz&#x2F;&amp;quot; are two different nodes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;1-1-mapping&quot;&gt;1-1 Mapping&lt;&#x2F;h5&gt;
&lt;p&gt;If your JSON message has no dynamic array, then 1-1 mapping rule definition is enough.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see an example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a test table based the path pattern syntax&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt; table test_tab1(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ci8&lt;&#x2F;span&gt;&lt;span&gt; Int8, cu64 Int64, cts DateTime
&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;JSON_MAPPINGS&lt;&#x2F;span&gt;&lt;span&gt; ci8 &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;a&#x2F;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, cu64 &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;c&#x2F;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, cts &amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;d&#x2F;1&#x2F;e&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Write a corresponding JSON data by the JoinBase default MQTT broker.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mosquitto_pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -t&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;test_db&#x2F;test_tab1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1883&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;a&amp;quot;:{&amp;quot;b&amp;quot;: -1},&amp;quot;c&amp;quot;: [100],&amp;quot;d&amp;quot;:[&amp;quot;&amp;quot;, {&amp;quot;e&amp;quot;: &amp;quot;2021-09-08T13:42:29&amp;quot;}]}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Check the written data.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; test_tab1;
&lt;&#x2F;span&gt;&lt;span&gt; ci8 |         cts         | cu64 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-----+---------------------+------
&lt;&#x2F;span&gt;&lt;span&gt;  -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;08 13&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span&gt; |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;dynamic-array-flattening&quot;&gt;Dynamic Array Flattening&lt;&#x2F;h5&gt;
&lt;p&gt;For JSON message with the dynamic array, JoinBase&#x27;s rule definition language provides a flattening mapping pattern syntax: &lt;strong&gt;one and only one array now can be flatten into multiple table records via wildcard symbol &lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Dynamics will compromise the performance. When you can control the format of message, 1-1 mapping will provide better performance.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s see a quick example about how dynamic array flattening help us:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A sample JSON message:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1636666666&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-01&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dev_name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25.1
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25.5
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25.9
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Create a test table based the path pattern syntax:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt; table sensors(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt; DateTime, 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_id&lt;&#x2F;span&gt;&lt;span&gt; String, 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_name&lt;&#x2F;span&gt;&lt;span&gt; String,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sensor_id&lt;&#x2F;span&gt;&lt;span&gt; UInt32,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; Float32
&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;JSON_MAPPINGS 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timestamp &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;timestamp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dev_name &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev_name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sensor_id &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;data&#x2F;*&#x2F;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;data&#x2F;*&#x2F;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Send the above sample message:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mosquitto_pub -d -t&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;abc&#x2F;sensors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 1883&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; abc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; abc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;timestamp&amp;quot;:1636666666,&amp;quot;dev_id&amp;quot;:&amp;quot;id-01&amp;quot;,&amp;quot;dev_name&amp;quot;:&amp;quot;abc&amp;quot;,&amp;quot;data&amp;quot;:[[1,25.1],[2,25.5],[3,25.9]]}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Check the saved records in JoinBase:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;abc=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; sensors;
&lt;&#x2F;span&gt;&lt;span&gt; dev_id | dev_name | sensor_id |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;      | value 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;--------+----------+-----------+---------------------+-------
&lt;&#x2F;span&gt;&lt;span&gt; id-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt;  | abc      |         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 05&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt; |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt; id-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt;  | abc      |         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 05&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt; |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt; id-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt;  | abc      |         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 05&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt; |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The biggest difference between 1-1 mapping and dynamic array flattening is that, &lt;strong&gt;one JSON message has been flattened into 3 rows&#x2F;records in the table&lt;&#x2F;strong&gt;. The data array&#x27;s inner arrays&#x27; first element goes to the sensor_id field separately, and inner arrays&#x27; second element goes to the value field separately.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;user-defined-mapping&quot;&gt;User Defined Mapping&lt;&#x2F;h4&gt;
&lt;p&gt;Arbitrary user defined mapping logic is supported via JoinBase&#x27;s .&lt;&#x2F;p&gt;
&lt;p&gt;Via the mechanism of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;extensions&#x2F;&quot;&gt;UDM(User Defined Mapping)&lt;&#x2F;a&gt;, JoinBase can support the arbitrary user defined mapping logic. For example, you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&quot;&gt;Protocol Buffers&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;flatbuffers&#x2F;&quot;&gt;FlatBuffers&lt;&#x2F;a&gt; binary message format in your payload if you like.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;footnote&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;code&gt;mosquitto_pub&lt;&#x2F;code&gt; is a simple MQTT command line tool, you can get it &lt;a href=&quot;https:&#x2F;&#x2F;mosquitto.org&#x2F;download&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Management</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/mgmt/" type="text/html"/>
		<id>https://joinbase.io/docs/references/mgmt/</id>
		<content type="html">&lt;h2 id=&quot;management&quot;&gt;Management&lt;&#x2F;h2&gt;
&lt;p&gt;After config, you can start the server of JoinBase:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;joinbase_start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The JoinBase server will listen on multiple ports to accept connections with different protocols.&lt;&#x2F;p&gt;
&lt;p&gt;To gracefully stop the server of JoinBase:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;joinbase_stop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;administration&quot;&gt;Administration&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;base-admin&quot;&gt;&lt;a id=&quot;base_admin&quot;&gt;&lt;&#x2F;a&gt; base_admin&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;base_admin&lt;&#x2F;code&gt; is a tool to do the UDAC(User and Device Access Control) of JoinBase.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create_user&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Use subcommand &lt;code&gt;create_user&lt;&#x2F;code&gt; creates a user with specific username and password:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_admin&lt;&#x2F;span&gt;&lt;span&gt; create_user abc abc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list_users&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Use subcommand &lt;code&gt;list_users&lt;&#x2F;code&gt; to check the users:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_admin&lt;&#x2F;span&gt;&lt;span&gt; list_users
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;help&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For all tools in JoinBase, you will get help from subcommand &lt;code&gt;help&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_admin&lt;&#x2F;span&gt;&lt;span&gt; help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>MQTT Interface</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/mqtt/" type="text/html"/>
		<id>https://joinbase.io/docs/references/mqtt/</id>
		<content type="html">&lt;p&gt;A built-in MQTT broker capacity is implemented in JoinBase. So,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;IoT devices just send MQTT messages to JoinBase server, &lt;&#x2F;li&gt;
&lt;li&gt;JoinBase will store data reliably for you, &lt;&#x2F;li&gt;
&lt;li&gt;And then you can subscribe to that topic&#x2F;table in other devices. &lt;&#x2F;li&gt;
&lt;li&gt;Finally, you can do fastest real-time IoT data analysis on top of stored bigdata via an easy SQL compatible language. &lt;&#x2F;li&gt;
&lt;li&gt;In the same time, you can use the JoinBase a high performance MQTT broker for routing messages to other subscribers as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;working-modes&quot;&gt;Working Modes&lt;&#x2F;h3&gt;
&lt;p&gt;There are two common working modes or scenarios for JoinBase:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Connections from direct MQTT clients on kinds of IoT devices.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;This mode is highly recommended&lt;&#x2F;strong&gt; because we support the top performance in world record level all-in-one product. &lt;&#x2F;p&gt;
&lt;p&gt;If you want to use existed brokers, you can start two connections in your device to connect: one for your broker and one for the JoinBase.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Connections from MQTT brokers on the bridge mode. &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If the above direct connection mode cannot be achieved immediately, you can use this working mode. We provide an excellent dedicated MQTT bridge. We also provide an dedicated MQTT bridge for existing users, who want to explore the JoinBase without making any changes to your existing architectures.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍 &lt;&#x2F;p&gt;
&lt;p&gt;Please note that the message writing performance will be highly limited by your front-end broker, usually by orders of magnitude lower.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;MQTT Bridge Config&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Get a helpfull information.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; oibb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a template configuration file base TOML under the &lt;code&gt;config&lt;&#x2F;code&gt; directory, 
which can be modified as needed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; vim .&#x2F;config&#x2F;bridge.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;MQTT Bridge Run&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;You can change the log output level by setting &lt;code&gt;BASE_LOG&lt;&#x2F;code&gt; environment variable.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; BASE_LOG=info oibb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --config&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;config&#x2F;bridge.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mqtt-message-to-table-mapping&quot;&gt;MQTT Message to Table Mapping&lt;&#x2F;h3&gt;
&lt;p&gt;In JoinBase, we have made the &lt;code&gt;Topic&lt;&#x2F;code&gt; concept in MQTT and the &lt;code&gt;Table&lt;&#x2F;code&gt; concept in database exchangeable. In order for the message to be correctly stored in the appropriate database table, we have made the following conventions:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Table&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;MQTT Message&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;db_name.table_name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;(3.1.1) topic: &#x2F;db_name&#x2F;table_name  &lt;br&#x2F;&gt;  (5.0) user properties: { &amp;quot;JoinBase.database&amp;quot;: &amp;quot;db_name&amp;quot;, &amp;quot;JoinBase.table&amp;quot;: &amp;quot;table_name&amp;quot;}&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;fields&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Payload. &lt;br&#x2F;&gt;  JoinBase supports &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mapping&#x2F;&quot;&gt;a payload mapping mechanism&lt;&#x2F;a&gt; for mapping the payload to the database table.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Performance Tips</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/performance/" type="text/html"/>
		<id>https://joinbase.io/docs/references/performance/</id>
		<content type="html">&lt;h4 id=&quot;reasonable-partition&quot;&gt;Reasonable Partition&lt;&#x2F;h4&gt;
&lt;p&gt;You have understood the concept of &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;concept#partition&quot;&gt;&lt;code&gt;Partition&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; why it is a key to the bigdata and JoinBase.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore, a good shaped partition is the key to the query performance. The basic principle is： &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;keep the size of partition between tens of thousand rows and tens of million rows as possible;&lt;&#x2F;li&gt;
&lt;li&gt;for time series data, partitioning using natural time units (day, hour, minute) is a good practice;&lt;&#x2F;li&gt;
&lt;li&gt;use &lt;code&gt;WHERE PARTITIONS&#x2F;PARTS&lt;&#x2F;code&gt; clause to narrow down your query dataset as possible to accelerate your queries speed directly and effectively unless your full table size is small&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;denormalization&quot;&gt;Denormalization&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Denormalization&quot;&gt;Denormalization&lt;&#x2F;a&gt; is a good practice to keep if you are working on the big data. The speed of single-table query and multi-table join may differ by hundreds or even tens of thousands of times.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;as possible mapping json to wide-row table schema rather than using the opaque String or container types.&lt;&#x2F;li&gt;
&lt;li&gt;as possible use Enum type for long String fields when data redundancy and denormalization used.&lt;&#x2F;li&gt;
&lt;li&gt;as possible trade space for time because the modern storage is cheap. For example, assumed that you have a frequently-used expression in the queries, it is good to derive a new column with this expression and use this column in the queries directly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;data-type&quot;&gt;Data Type&lt;&#x2F;h4&gt;
&lt;p&gt;Choosing the right data type may greatly improve your storage and query efficiency.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;use Enum and Dict type rather than String type if your String like column has a small variance in its contents (a.k.a., low cardinality).&lt;&#x2F;li&gt;
&lt;li&gt;use No-nullable types with default values (such as &#x27;&#x27;, 0, etc) rather than Nullable types (with null) as possible. Because the null value handling is tricky in some cases and the query with no-nullable type is obviously faster than that of nullable type in many cases.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h4&gt;
&lt;p&gt;JoinBase is forged for modern hardware. With JoinBase in a modern box, you can sleep while handling with the global device data torrent. Therefore, don&#x27;t hesitate to use the latest hardware against the JoinBase. &lt;&#x2F;p&gt;
&lt;p&gt;Today&#x27;s SSDs(Solid State Drives) are already very cheap. And because the JoinBase has a built-in unique reliability design, it is highly recommended to all users to use SSDs for the storage.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PostgreSQL Interface</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/postgresql/" type="text/html"/>
		<id>https://joinbase.io/docs/references/postgresql/</id>
		<content type="html">&lt;p&gt;Any PostgreSQL client or language can talk with JoinBase in the capability. However, we think that the syntax of PostgreSQL, as a SQL dialect, it shows some inconsistent and confusing in the usage. For example, to show databases&#x27; information, you should use a exotic symbolic &lt;code&gt;\l&lt;&#x2F;code&gt;, rather than a plain SQL like statement.&lt;&#x2F;p&gt;
&lt;p&gt;JoinBase, as brand-new end-to-end IoT database, based on 20 year database experience, via learning from different dialects - PostgreSQL, MySQL, ClickHouse et. al., we want to provide a &lt;strong&gt;simple, neat, consistent and extendable&lt;&#x2F;strong&gt; ansi-SQL compatible language for users, rather than being a clone of any existing dialect.&lt;&#x2F;p&gt;
&lt;p&gt;The JoinBase language specification could be seen in the &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;lang&#x2F;&quot;&gt;&lt;code&gt;Language&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the following list, we continue to track the compatibility of main PostgreSQL clients and drivers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;client-compatibility&quot;&gt;Client Compatibility&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Client Name&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Tested&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;app-psql.html&quot;&gt;psql&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;PostgreSQL official terminal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;driver-compatibility&quot;&gt;Driver Compatibility&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Language&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Tested&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Go&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Python&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Java&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;C&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;C++&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Rust&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Javascript&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;language-driver-examples&quot;&gt;Language Driver Examples&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;go&quot;&gt;Go&lt;&#x2F;h3&gt;
&lt;p&gt;sample mod:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;module hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.17
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eclipse&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paho&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;golang v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.3.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; indirect
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gorilla&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;websocket v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.4.2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; indirect
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pq v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.10.4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; indirect
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;golang&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;net v0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.0.0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20200425230154&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ff2c4b7c35a0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; indirect
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;sample program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;database&#x2F;sql&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;eclipse&#x2F;paho.mqtt.golang&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github.com&#x2F;lib&#x2F;pq&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connStr &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user=abc password=abc dbname=abc sslmode=disable host=127.0.0.1 port=5433&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connStr&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test0&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectHandler mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;OnConnectHandler &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Connected&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectLostHandler mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ConnectionLostHandler &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Connect lost: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;newMQTTClient&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Client &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;broker &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1883
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewClientOptions&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AddBroker&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;broker&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetClientID&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;go_mqtt_client&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetUsername&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SetPassword&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; opts.OnConnect = connectHandler
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; opts.OnConnectionLost = connectLostHandler
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NewClient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Connect&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;() &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++ {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Wait&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test (x UInt16);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newMQTTClient&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;uint16&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}		
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test0&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test0 (x UInt64, y Int64);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test0 values(1, 2),(2, 3);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x, y from test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;uint64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int64
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test0: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}	
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test1 (x String); &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test1 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test1: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test2 (x DateTime); &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test2 values(&amp;#39;2021-01-01 00:00:00&amp;#39;),(&amp;#39;2021-02-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test2: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;			
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test3;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test3 (x FixedString(20)); &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test3 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)	
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test3;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test3: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;			
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum8 as Enum8(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum16 as Enum16(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test4 (x ColorEnum8, y ColorEnum16); &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test4 values(&amp;#39;blue&amp;#39;, &amp;#39;blue&amp;#39;),(&amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), (&amp;#39;black&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)	
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x, y from test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test4: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sql&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DB&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test5 (x UInt64, y String, z DateTime) partition by (x, y, toYYYY(z));&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test5 values(1, &amp;#39;Hello, World&amp;#39;, &amp;#39;2020-01-01 00:00:00&amp;#39;),(2, &amp;#39;你好, 世界&amp;#39;, &amp;#39;2021-01-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x, y, z from test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;uint64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rows&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Scan&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test5: x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}	
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;python&quot;&gt;Python&lt;&#x2F;h3&gt;
&lt;p&gt;sample program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;psycopg2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;paho.mqtt.client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mqtt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;client = mqtt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client_id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clean_session&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;userdata&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt;=mqtt.MQTTv311,
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username_pw_set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1883&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keepalive&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    connection = psycopg2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5433&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# if you don&amp;#39;t set this, the driver will assume that you are using a
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# detached transaction and put the BEGIN at the begining of the query
&lt;&#x2F;span&gt;&lt;span&gt;    connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_session&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;autocommit&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor = connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select 1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    record = cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(record)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test (x UInt16)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qos&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test0 (x UInt32, y Int64);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test0 values(1, 2),(2, 3);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test1 (x String);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test1 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test2 (x DateTime);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test2 values(&amp;#39;2021-01-01 00:00:00&amp;#39;),(&amp;#39;2021-02-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum8 as Enum8(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum16 as Enum16(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test4 (x ColorEnum8, y ColorEnum16);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test4 values(&amp;#39;blue&amp;#39;, &amp;#39;blue&amp;#39;),(&amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), (&amp;#39;black&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test5 (x Int32, y String, z DateTime) partition by toYYYY(z);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test5 values(1, &amp;#39;Hello, World&amp;#39;, &amp;#39;2020-01-01 00:00:00&amp;#39;),(2, &amp;#39;你好, 世界&amp;#39;, &amp;#39;2021-01-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y,z from test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;(Exception, psycopg2.Error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;error:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(error)
&lt;&#x2F;span&gt;&lt;span&gt;    connection = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(connection is not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PostgreSQL connection is now closed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;c&quot;&gt;C&lt;&#x2F;h3&gt;
&lt;p&gt;sample program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MQTTClient.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;libpq-fe.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;ADDRESS     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;localhost:1883&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;CLIENTID    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExampleClientPub&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;QOS         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;TIMEOUT     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_exit&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, PGresult *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(MQTTClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_exit&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, PGresult *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQerrorMessage&lt;&#x2F;span&gt;&lt;span&gt;(conn));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQclear&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(MQTTClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_message pubmsg = MQTTClient_message_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_deliveryToken token;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*)msg;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payloadlen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strlen&lt;&#x2F;span&gt;&lt;span&gt;(msg);
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qos &lt;&#x2F;span&gt;&lt;span&gt;= QOS;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retained &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_publishMessage&lt;&#x2F;span&gt;&lt;span&gt;(client, topic, &amp;amp;pubmsg, &amp;amp;token);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_waitForCompletion&lt;&#x2F;span&gt;&lt;span&gt;(client, token, TIMEOUT);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    PGresult *res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQexec&lt;&#x2F;span&gt;&lt;span&gt;(conn, query);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQresultStatus&lt;&#x2F;span&gt;&lt;span&gt;(res) == PGRES_TUPLES_OK) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rows = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQntuples&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&amp;lt;rows; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j&amp;lt;cols; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQgetvalue&lt;&#x2F;span&gt;&lt;span&gt;(res, i, j));
&lt;&#x2F;span&gt;&lt;span&gt;	    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQclear&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[])
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; lib_ver = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQlibVersion&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Version of libpq: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, lib_ver);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PGconn *conn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQconnectdb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host=localhost port=5433 user=abc dbname=abc password=abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQstatus&lt;&#x2F;span&gt;&lt;span&gt;(conn) == CONNECTION_BAD) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Connection to database failed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQerrorMessage&lt;&#x2F;span&gt;&lt;span&gt;(conn));
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ver = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQserverVersion&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server version: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ver);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient client;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_message pubmsg = MQTTClient_message_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_deliveryToken token;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rc;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_create&lt;&#x2F;span&gt;&lt;span&gt;(client, ADDRESS, CLIENTID,
&lt;&#x2F;span&gt;&lt;span&gt;        MQTTCLIENT_PERSISTENCE_NONE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keepAliveInterval &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleansession &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((rc = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_connect&lt;&#x2F;span&gt;&lt;span&gt;(client, &amp;amp;conn_opts)) != MQTTCLIENT_SUCCESS)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to connect, return code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rc);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(EXIT_FAILURE);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test (x UInt16)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(client, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test0 (x UInt32, y Int64)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test0 values(1, 2),(2, 3);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test1 (x String)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test1 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test2 (x DateTime)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test2 values(&amp;#39;2021-01-01 00:00:00&amp;#39;),(&amp;#39;2021-02-01 00:00:00&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum8 as Enum8(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum16 as Enum16(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test4 (x ColorEnum8, y ColorEnum16)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test4 values(&amp;#39;blue&amp;#39;, &amp;#39;blue&amp;#39;),(&amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), (&amp;#39;black&amp;#39;, &amp;#39;black&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test5 (x Int32, y String, z DateTime) partition by toYYYY(z)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test5 values(1, &amp;#39;Hello, World&amp;#39;, &amp;#39;2020-01-01 00:00:00&amp;#39;),(2, &amp;#39;你好, 世界&amp;#39;, &amp;#39;2021-01-01 00:00:00&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y,z from test5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_disconnect&lt;&#x2F;span&gt;&lt;span&gt;(client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_destroy&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;client);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; rc;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;c-1&quot;&gt;C++&lt;&#x2F;h3&gt;
&lt;p&gt;sample program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MQTTClient.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;libpq-fe.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chrono&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;thread&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;ADDRESS     &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;localhost:1883&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;CLIENTID    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExampleClientPub&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;QOS         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;TIMEOUT     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;secs&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_exit&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, PGresult *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(MQTTClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;secs&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    std::this_thread::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep_for&lt;&#x2F;span&gt;&lt;span&gt;(std::chrono::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;milliseconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;*secs));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_exit&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, PGresult *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQerrorMessage&lt;&#x2F;span&gt;&lt;span&gt;(conn));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQclear&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(MQTTClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_message pubmsg = MQTTClient_message_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_deliveryToken token;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payload &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;*)msg;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payloadlen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strlen&lt;&#x2F;span&gt;&lt;span&gt;(msg);
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;qos &lt;&#x2F;span&gt;&lt;span&gt;= QOS;
&lt;&#x2F;span&gt;&lt;span&gt;    pubmsg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;retained &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_publishMessage&lt;&#x2F;span&gt;&lt;span&gt;(client, topic, &amp;amp;pubmsg, &amp;amp;token);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_waitForCompletion&lt;&#x2F;span&gt;&lt;span&gt;(client, token, TIMEOUT);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(PGconn *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cols&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    PGresult *res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQexec&lt;&#x2F;span&gt;&lt;span&gt;(conn, query);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQresultStatus&lt;&#x2F;span&gt;&lt;span&gt;(res) == PGRES_TUPLES_OK) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rows = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQntuples&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&amp;lt;rows; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j&amp;lt;cols; j++) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQgetvalue&lt;&#x2F;span&gt;&lt;span&gt;(res, i, j));
&lt;&#x2F;span&gt;&lt;span&gt;	    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQclear&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[])
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; lib_ver = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQlibVersion&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Version of libpq: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, lib_ver);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    PGconn *conn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQconnectdb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host=localhost port=5433 user=abc dbname=abc password=abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQstatus&lt;&#x2F;span&gt;&lt;span&gt;(conn) == CONNECTION_BAD) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf&lt;&#x2F;span&gt;&lt;span&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Connection to database failed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQerrorMessage&lt;&#x2F;span&gt;&lt;span&gt;(conn));
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; ver = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQserverVersion&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server version: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ver);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient client;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_message pubmsg = MQTTClient_message_initializer;
&lt;&#x2F;span&gt;&lt;span&gt;    MQTTClient_deliveryToken token;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rc;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_create&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;client, ADDRESS, CLIENTID,
&lt;&#x2F;span&gt;&lt;span&gt;        MQTTCLIENT_PERSISTENCE_NONE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keepAliveInterval &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cleansession &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    conn_opts.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((rc = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_connect&lt;&#x2F;span&gt;&lt;span&gt;(client, &amp;amp;conn_opts)) != MQTTCLIENT_SUCCESS)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed to connect, return code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, rc);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(EXIT_FAILURE);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test (x UInt16)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_msg&lt;&#x2F;span&gt;&lt;span&gt;(client, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test0 (x UInt32, y Int64)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test0 values(1, 2),(2, 3);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test1 (x String)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test1 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test2 (x DateTime)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test2 values(&amp;#39;2021-01-01 00:00:00&amp;#39;),(&amp;#39;2021-02-01 00:00:00&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum8 as Enum8(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum16 as Enum16(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test4 (x ColorEnum8, y ColorEnum16)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test4 values(&amp;#39;blue&amp;#39;, &amp;#39;blue&amp;#39;),(&amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), (&amp;#39;black&amp;#39;, &amp;#39;black&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test5 (x Int32, y String, z DateTime) partition by toYYYY(z)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test5 values(1, &amp;#39;Hello, World&amp;#39;, &amp;#39;2020-01-01 00:00:00&amp;#39;),(2, &amp;#39;你好, 世界&amp;#39;, &amp;#39;2021-01-01 00:00:00&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_query&lt;&#x2F;span&gt;&lt;span&gt;(conn, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y,z from test5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PQfinish&lt;&#x2F;span&gt;&lt;span&gt;(conn);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_disconnect&lt;&#x2F;span&gt;&lt;span&gt;(client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MQTTClient_destroy&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;client);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; rc;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rust&quot;&gt;Rust&lt;&#x2F;h3&gt;
&lt;p&gt;Sample program could be in our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-JoinBase&#x2F;oidbs&quot;&gt;OIDBS project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;javascript&quot;&gt;Javascript&lt;&#x2F;h3&gt;
&lt;p&gt;sample program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Pool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Client &lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pg&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;async-mqtt&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1883&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientId &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mqtt_${Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectUrl &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mqtt:&#x2F;&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}:${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool &lt;&#x2F;span&gt;&lt;span&gt;= new Pool({
&lt;&#x2F;span&gt;&lt;span&gt;    user: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    host: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    database: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    password: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5433&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;, []);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.rows.length != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.rows);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new Promise((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt_client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connectAsync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connectUrl&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	clean: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	connectTimeout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	username: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;	password: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;	reconnectPeriod: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test (x UInt16);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt_client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: 1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test0 (x UInt32, y Int64);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test0 values(1, 2),(2, 3);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x, y from test0;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test1 (x String);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test1 values(&amp;#39;Hello, World&amp;#39;),(&amp;#39;你好, 世界&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test1;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test2 (x DateTime);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test2 values(&amp;#39;2021-01-01 00:00:00&amp;#39;),(&amp;#39;2021-02-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x from test2;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum8 as Enum8(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create type if not exists ColorEnum16 as Enum16(&amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;gray&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test4 (x ColorEnum8, y ColorEnum16);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test4 values(&amp;#39;blue&amp;#39;, &amp;#39;blue&amp;#39;),(&amp;#39;gray&amp;#39;, &amp;#39;gray&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), (&amp;#39;black&amp;#39;, &amp;#39;black&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y from test4;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drop table if exists test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create table if not exists test5 (x Int32, y String, z DateTime) partition by toYYYY(z);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insert into test5 values(1, &amp;#39;Hello, World&amp;#39;, &amp;#39;2020-01-01 00:00:00&amp;#39;),(2, &amp;#39;你好, 世界&amp;#39;, &amp;#39;2021-01-01 00:00:00&amp;#39;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sendQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select x,y,z from test5;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pg_client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mqtt_client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;})().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;catch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Topics</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/topics/" type="text/html"/>
		<id>https://joinbase.io/docs/references/topics/</id>
		<content type="html">&lt;p&gt;Topic is just an URI or path for addressing the database entities. JoinBase extends the database qualified table to MQTT&#x2F;HTTP protocols to unify the representation of storage objects or data sinks. With topic, JoinBase has one unique data entity object semantic description under all different protocols.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;core&quot;&gt;Core&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;docs&#x2F;topics.png&quot; class=&quot;img-fluid&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt; Asynchronous Replication Diagram &lt;p&#x2F;&gt;
&lt;p&gt;In the JoinBase, the data sink is just described by the qualified table, a.k.a., database.table. &lt;strong&gt;The qualified table is just the topic called in MQTT protocol and the path called in HTTP protocol.&lt;&#x2F;strong&gt; &lt;&#x2F;p&gt;
&lt;p&gt;For example, the following PG console or shell commands are equivalent：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Protocols&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;DB Entity&#x2F;Topic&#x2F;Path&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Statements&#x2F;Commands&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Database&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;abc.t&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;insert into abc.t values (1,2)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;MQTT&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&#x2F;abc&#x2F;t&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;mosquitto_pub -d -t &#x2F;abc&#x2F;t -h 127.0.0.1 -u abc -P abc -m &#x27;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2}&#x27;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&#x2F;abc&#x2F;t&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;curl -H &#x27;X-JoinBase-User: abc&#x27; -H &#x27;X-JoinBase-Key: abc&#x27;  -X POST &#x27;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;abc&#x2F;t&#x27; -d &#x27;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2}&#x27;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;topic-aliases&quot;&gt;Topic Aliases&lt;&#x2F;h2&gt;
&lt;p&gt;To provide the greatest degree of semantic compatibility, JoinBase supports the concept called &lt;code&gt;Topic Aliases&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With topic aliases, You can mapping any topic&#x2F;path into the normalized &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;topics&quot;&gt;topic&#x2F;path&lt;&#x2F;a&gt; in JoinBase. This is done by setting the mappings in the conf file. For example, the following lines in the conf,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[topic.aliases]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;sensors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;edge&#x2F;x2view&#x2F;1234567890&#x2F;some_deeper_uri_path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;abc&#x2F;sensors&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;edge&#x2F;x2view&#x2F;0123456789&#x2F;another_deeper_uri_path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Two paths &amp;quot;&#x2F;edge&#x2F;x2view&#x2F;1234567890&#x2F;some_deeper_uri_path&amp;quot; and &amp;quot;&#x2F;edge&#x2F;x2view&#x2F;0123456789&#x2F;another_deeper_uri_path&amp;quot; are mapped to one single normalized topic &amp;quot;&#x2F;abc&#x2F;sensors&amp;quot; which is equivalent to the database entity &amp;quot;abc.sensors&amp;quot;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WebSocket Interface</title>
		<published>2021-09-01T08:20:00+00:00</published>
		<updated>2021-12-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/websocket/" type="text/html"/>
		<id>https://joinbase.io/docs/references/websocket/</id>
		<content type="html"></content>
	</entry>
	<entry xml:lang="en">
		<title>Quick Start for Cloud</title>
		<published>2021-05-01T08:20:00+00:00</published>
		<updated>2021-05-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/getting-started/quick-start-cloud/" type="text/html"/>
		<id>https://joinbase.io/docs/getting-started/quick-start-cloud/</id>
		<content type="html">&lt;p&gt;JoinBase Cloud Preview is modified from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getredash&#x2F;redash&quot;&gt;Redash&lt;&#x2F;a&gt;, and we really appreciated for Redash&#x27;s great frontend works. Thanks to the excellently intuitive UI, we only give the guidance on main points. Recommend to &lt;a href=&quot;https:&#x2F;&#x2F;cloud.joinbase.io&quot;&gt;sign up&lt;&#x2F;a&gt; and explore yourself.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Dashboard&lt;p&#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;docs&#x2F;joinbase_cloud_1.png&quot; alt=&quot;JoinBase cloud&quot; class=&quot;img-fluid&quot;&gt;
&lt;ol&gt;
&lt;li&gt;Side bar for quick navigation.&lt;&#x2F;li&gt;
&lt;li&gt;Settings for more infos about message writing.&lt;&#x2F;li&gt;
&lt;li&gt;Request link for applying for JoinBase Enterprise.&lt;&#x2F;li&gt;
&lt;li&gt;Current quota usage.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p align=&quot;center&quot;&gt;Query&lt;p&#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;docs&#x2F;joinbase_cloud_2.png&quot; alt=&quot;JoinBase cloud&quot; class=&quot;img-fluid&quot;&gt;
&lt;ol&gt;
&lt;li&gt;Databases list which you can connect with. The current Preview only support tow databases: your owned in the name of account name and default.&lt;&#x2F;li&gt;
&lt;li&gt;Fresh the current database (maybe some bug happens for delayed freshing)&lt;&#x2F;li&gt;
&lt;li&gt;Schema infos for current database. You can click the right arrow of table name for detail columns listing.&lt;&#x2F;li&gt;
&lt;li&gt;SQL editor.&lt;&#x2F;li&gt;
&lt;li&gt;Result set showing and visualizing.&lt;&#x2F;li&gt;
&lt;li&gt;Runtime for current query. Because Redash uses a process based worker pool for querying, this increase the end-to-end latency of a single query. Note, you may observe longer delay between sending and result showing, it is from scheduling queries in pool. This delay has been removed from the runtime value largely. But this timing is not exact yet. Sometimes, we observe 2x slowness in this timing. We put this timing here is for showing a qualitative performance information for users.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p align=&quot;center&quot;&gt;Settings&lt;p&#x2F;&gt;
&lt;img src=&quot;&#x2F;imgs&#x2F;docs&#x2F;joinbase_cloud_3.png&quot; alt=&quot;JoinBase cloud&quot; class=&quot;img-fluid&quot;&gt;
&lt;ol&gt;
&lt;li&gt;MQTT endpoint uri. This uir provide the info connect to JoinBase Cloud Preview MQTT server per account.&lt;&#x2F;li&gt;
&lt;li&gt;Tips lists an ready-to-run example against the JoinBase Cloud Preview. Try yourself!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In order to avoid resources misuse, some functionalities have be restricted to a certain extent, but due to time constraints, we may not update it at the first time. You can &lt;a href=&quot;https:&#x2F;&#x2F;cloud.joinbase.io&#x2F;req&quot;&gt;apply the JoinBase Enterprise for your own evaluation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, although we have made some restrictions, to make users to experience a general system, we still open the general query of the &lt;a href=&quot;&#x2F;benchmark&#x2F;#benchmark-model&quot;&gt;10-billion-row &lt;code&gt;nyct_strip&lt;&#x2F;code&gt; dataset&lt;&#x2F;a&gt;. It is hoped that users do a fair use of resources. If you have any questions, welcome to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-joinbase&#x2F;joinbase&quot;&gt;the community&lt;&#x2F;a&gt; to ask questions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Quick Start for Enterprise</title>
		<published>2021-05-01T08:20:00+00:00</published>
		<updated>2021-05-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/getting-started/quick-start-enterprise/" type="text/html"/>
		<id>https://joinbase.io/docs/getting-started/quick-start-enterprise/</id>
		<content type="html">&lt;h2 id=&quot;get-joinbase-enterprise&quot;&gt;Get JoinBase Enterprise&lt;&#x2F;h2&gt;
&lt;p&gt;All individuals or companies are welcome to request the free JoinBase Enterprise via the &lt;a href=&quot;&#x2F;request&quot;&gt;page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To quickly prepare JoinBase, see more in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;install&#x2F;&quot;&gt;Installation&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;config-and-start-server&quot;&gt;Config and Start Server&lt;&#x2F;h2&gt;
&lt;p&gt;The only item in conf file you should change in the first time is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;directories of your data, schema and WAL(Write-Ahead Logging).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;meta_dirs = [&amp;quot;path_to_your_meta_dir&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;data_dirs = [&amp;quot;path_to_your_data_dir&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;wal_dir = &amp;quot;path_to_your_wal_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;log_dir = &amp;quot;path_to_your_log_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See more about config in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;conf&#x2F;&quot;&gt;Configuration&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;p&gt;After the config, you can start the JoinBase&#x27;s server from the root directory of JoinBase by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;joinbase_start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See more about management and administration in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mgmt&#x2F;&quot;&gt;&lt;code&gt;Management&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; page. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Use &lt;code&gt;tail -f&lt;&#x2F;code&gt; to track your log in the directory of above &lt;code&gt;log_dir&lt;&#x2F;code&gt;(path_to_your_log_dir)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;add-users&quot;&gt;Add Users&lt;&#x2F;h2&gt;
&lt;p&gt;JoinBase system follows the philosophy of whitelist. Even you have started a server, you can do nothing if you do not explicit allow.&lt;&#x2F;p&gt;
&lt;p&gt;So, in the next step, you should add some user via our &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mgmt#base_admin&quot;&gt;&lt;code&gt;base_admin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; tool. &lt;&#x2F;p&gt;
&lt;p&gt;The following subcommand &lt;code&gt;create_user&lt;&#x2F;code&gt; creates a user with a demo username &lt;code&gt;abc&lt;&#x2F;code&gt; and password &lt;code&gt;abc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_admin&lt;&#x2F;span&gt;&lt;span&gt; create_user abc abc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;It is recommend that you should not provide the input in the password position. If the password is not provided, the command will request you to provide a password in a non-displayed style.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;connect-to-joinbase&quot;&gt;Connect to JoinBase&lt;&#x2F;h2&gt;
&lt;p&gt;After setup an &lt;code&gt;abc&lt;&#x2F;code&gt; user, You can use this user to connect to our PostgreSQL wire protocol compatible server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;psql -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 5433&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; abc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JoinBase&#x27;s own language choose to support more intuitive MySQL style management statements rather than PostgreSQL&#x27;s  &lt;code&gt;\&lt;&#x2F;code&gt; starting command, although JoinBase supports PostgreSQL&#x27;s clients.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;show databases;
&lt;&#x2F;span&gt;&lt;span&gt;use system;
&lt;&#x2F;span&gt;&lt;span&gt;show tables;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See more about JoinBase language in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;lang&#x2F;&quot;&gt;Language&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;append &lt;code&gt;-d db_name&lt;&#x2F;code&gt; to psql to make psql connected to that database in default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Each login has a log. If the import or write does not generate a log, check whether the port is occupied by other services.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;create-table&quot;&gt;Create Table&lt;&#x2F;h2&gt;
&lt;p&gt;There is nothing interesting unless we have some tables for writing data to or reading data from.&lt;&#x2F;p&gt;
&lt;p&gt;The structure of JoinBase table is directly mapping from the MQTT message. By the mapping, the json payload of one MQTT message will be extracted and saved into the targeted table. See more about mapping of MQTT messages in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mqtt&#x2F;&quot;&gt;MQTT Messages&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a database and a table to store the data. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;create database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;use abc;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT EXISTS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;t
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    a Nullable(UInt32),
&lt;&#x2F;span&gt;&lt;span&gt;    b Int64
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note, the above statement is for demo. You should use a partition schema for a big sized table. &lt;&#x2F;p&gt;
&lt;p&gt;See more about &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;concept#partition&quot;&gt;&lt;code&gt;Partition&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;lang#create_table&quot;&gt;&lt;code&gt;create table&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ingest-message&quot;&gt;Ingest Message&lt;&#x2F;h2&gt;
&lt;p&gt;Now, we can do a test query for the new table.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;abc=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yes. There is no data in the new table &lt;code&gt;t&lt;&#x2F;code&gt;. Let&#x27;s inject a sample data into the table.&lt;&#x2F;p&gt;
&lt;p&gt;You can use all provided interfaces to ingest the data. For example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP interface&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -s -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-User: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-JoinBase-Key: abc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;  -X&lt;&#x2F;span&gt;&lt;span&gt; POST &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;abc&#x2F;t&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1,2&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;curl&lt;&#x2F;code&gt; is one popular HTTP client tool. See more in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;http&#x2F;&quot;&gt;HTTP Interface&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;MQTT interface&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mosquitto_pub -d -t&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;abc&#x2F;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -h&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; abc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; abc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;mosquitto_pub&lt;&#x2F;code&gt; is a 3rd party MQTT client tool from &lt;a href=&quot;https:&#x2F;&#x2F;mosquitto.org&#x2F;&quot;&gt;Eclipse Mosquitto&lt;&#x2F;a&gt;. See more in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;mqtt&#x2F;&quot;&gt;MQTT Interface&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;PostgreSQL interface&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This statement is issued from the PostgreSQL&#x27;s official console &lt;code&gt;psql&lt;&#x2F;code&gt;. See more in &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;postgresql&#x2F;&quot;&gt;PostgreSQL Interface&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔍&lt;&#x2F;p&gt;
&lt;p&gt;Use latest tools to avoid potential compatibility problems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;make-the-query&quot;&gt;Make the Query&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s go back for the first query again:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;abc=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;abc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  a  |  b  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;-----+-----
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; |   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;go-further&quot;&gt;Go Further&lt;&#x2F;h2&gt;
&lt;p&gt;Congrats for finishing the first query on the JoinBase! Yes, compared with traditional databases or big data platforms, the use of base is super simple!&lt;&#x2F;p&gt;
&lt;p&gt;You may want to understand more about JoinBase. &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;concept&#x2F;&quot;&gt;Concept →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Language</title>
		<published>2021-05-01T08:20:00+00:00</published>
		<updated>2021-10-27T08:20:00+00:00</updated>
		<link rel="alternate" href="https://joinbase.io/docs/references/lang/" type="text/html"/>
		<id>https://joinbase.io/docs/references/lang/</id>
		<content type="html">&lt;p&gt;We also try to learn the great part of PostgreSQL&#x2F;TimescaleDB, MySQL et. al. in the language side. If you feel that there are good representations, functions and designs in these dialects, don&#x27;t hesitate to come to the community to give your suggestions.&lt;&#x2F;p&gt;
&lt;p&gt;Here, we mainly show the differences and extensions to the ANSI SQL syntax which needing attention. Feel free to ask help from us and the community. &lt;&#x2F;p&gt;
&lt;p&gt;Finally, JoinBase is evolving rapidly. This language document is continuing to be improved based on the latest progress.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;data-types&quot;&gt;Data Types&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Data Types&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;Support Status&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Int8&#x2F;Int16&#x2F;Int32&#x2F;Int64&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;UInt8&#x2F;UInt16&#x2F;UInt32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Unsigned integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Float32&#x2F;Float64&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;IEEE 754 float point number&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;String&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Variable-length UTF8 string&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blob&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Variable-length binary data block&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Date&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;32-bit date, days since UNIX epoch 1970-01-01&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;DateTime&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;timestamp with an optional timezone, measured as a Unix epoch. The time zone is a string indicating the name of a time zone, either a time zone offset form &amp;quot;+XX:XX&amp;quot; or &amp;quot;-XX:XX&amp;quot;, such as +07:30, or &amp;quot;Region&#x2F;City&amp;quot; such as &amp;quot;America&#x2F;New_York&amp;quot;. If timezone is not provided, the server timezone (configurable via JoinBase conf file) will be used.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Decimal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Signed fixed-point big numbers with precision and scale. For division least significant digits are discarded (not rounded).&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Boolean&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;boolean true or false&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;FixedString&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Fixed-length string of N bytes.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Enum8&lt;br&#x2F;&gt;Enum16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Dictionary type, by manually mapping a low cardinality type to another type. &lt;br&#x2F;&gt; It is highly recommended to use this to boost the query performance if you have low cardinality String columns.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;typed-literals&quot;&gt;Typed Literals&lt;&#x2F;h3&gt;
&lt;p&gt;Literals for primary types like integer or string is well established. For advanced types, like datetime, the traditional implicit pure string representations are subtle and error-prone.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid ambiguity and enhance the maintainability of the language, not like some SQL dialects, single quoted string literal in the JoinBase is just for the String type. On the contrary, we favor &lt;code&gt;typed literals&lt;&#x2F;code&gt; for advanced literal, that is: &lt;code&gt;type prefix + string representation of that type&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;DateTime Types&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Example&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;DateTime&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;form#1: &lt;code&gt;datetime&#x27;2001-01-01 01:01:01&#x27;&lt;&#x2F;code&gt;&lt;br&#x2F;&gt;(this form will use server defined time zone) &lt;br&#x2F;&gt;form#2: &lt;code&gt;datetime&#x27;2001-01-01 01:01:01+08:00&#x27;&lt;&#x2F;code&gt;&lt;br&#x2F;&gt;(this form use the time zone defined in the literal) &lt;br&#x2F;&gt; &lt;br&#x2F;&gt; &lt;code&gt;datetime&lt;&#x2F;code&gt; prefix can be reduced to &lt;code&gt;dt&lt;&#x2F;code&gt;, like &lt;code&gt;dt&#x27;2001-01-01 01:01:01&#x27;&lt;&#x2F;code&gt; for short.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Date&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;date&#x27;2001-01-01&#x27;&lt;&#x2F;code&gt; &lt;br&#x2F;&gt; for short, &lt;code&gt;d&#x27;2001-01-01&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Time&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;time&#x27;01:01:01&#x27;&lt;&#x2F;code&gt; &lt;br&#x2F;&gt; for short, &lt;code&gt;t&#x27;01:01:01&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;FixedString&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;fs(10)&#x27;abc123&#x27;&lt;&#x2F;code&gt;&lt;br&#x2F;&gt; There the type prefix has a parameter for specifying the byte width of FixedString type. Because the FixedString data has a fixed length. The width parameter is used for padding its string representation. &lt;br&#x2F;&gt; If the byte width is not provided, the length of its string representation will be used. That is, &lt;code&gt;fs&#x27;abc123&#x27;&lt;&#x2F;code&gt; is the short form of &lt;code&gt;fs(6)&#x27;abc123&#x27;&lt;&#x2F;code&gt;. See &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;lang#note_fixedstring&quot;&gt;more in the note&lt;&#x2F;a&gt; below.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Not like Postgresql, JoinBase only have one timezone-wared DateTime type. It is recommended that you use the default timezone of JoinBase, which is the time zone of the JoinBase server. But you can specify the time zone in anywhere needed.&lt;&#x2F;li&gt;
&lt;li&gt;Date and Time type are not related the time zones, it just plain date and time. If you need timezone wared behavior, you just use DateTime type.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a id=&quot;note_fixedstring&quot;&gt;&lt;&#x2F;a&gt;FixedString data in the JoinBase is fixed length. For the shorter string representation, it is necessary to pad the representation to the fixed length (with zero). For the longer string representation, the excess trailing will be truncated away. To enhance the ergonomics, for the representation which you can not need to pad, you can omit the width parameter, like &lt;code&gt;fs&#x27;abc123&#x27;&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;data-definition-manipulation-and-management&quot;&gt;Data Definition, Manipulation and Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;create database &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE DATABASE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT EXISTS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;db_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;create_table&quot;&gt;&lt;&#x2F;a&gt;create table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;IF NOT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;EXISTS&lt;&#x2F;span&gt;&lt;span&gt; [db_name.]table_name
&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    a Nullable(UInt32),
&lt;&#x2F;span&gt;&lt;span&gt;    b Int64
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;PARTITION BY toYYYYMM(ts)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Note&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Nullable&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;A nullable column is explicitly defined with &lt;code&gt;Nullable&lt;&#x2F;code&gt; container type.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;PARTITION BY&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;PARTITION BY&lt;&#x2F;code&gt; clause is used to specify the partition key and partition expression of this table. Currently, only one column can be used as the &lt;code&gt;partition key&lt;&#x2F;code&gt; and only the specific functions can be used for the &lt;code&gt;partition expression&lt;&#x2F;code&gt;. All specific functions are listed below. It is planed to extend this feature to allow the complex expression combinations in the future.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Allowed specific partition functions:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Num of Arguments&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;no function, a.k.a. just one raw column.&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;yyyy&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;get the year from a &lt;code&gt;Date&lt;&#x2F;code&gt; or &lt;code&gt;DateTime&lt;&#x2F;code&gt; value as 4-digit integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;yyyymm&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;get the year, month from a &lt;code&gt;Date&lt;&#x2F;code&gt; or &lt;code&gt;DateTime&lt;&#x2F;code&gt; value as 6-digit integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;yyyymmdd&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;get the year, month and day from a &lt;code&gt;Date&lt;&#x2F;code&gt; or &lt;code&gt;DateTime&lt;&#x2F;code&gt; value as 8-digit integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;yyyymmdd10&#x2F;yyyymmdd7&#x2F;yyyymmdd3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;variant of yyyymmdd with &lt;code&gt;DateTime&lt;&#x2F;code&gt; type, but the interval gap is 10&#x2F;7&#x2F;3-day&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ymdh&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;get the year, month, day, hour from a &lt;code&gt;DateTime&lt;&#x2F;code&gt; value as 10-digit integer&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;ymdh2&#x2F;ymdh4&#x2F;ymdh6&#x2F;ymdh12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;variant of ymdh with &lt;code&gt;DateTime&lt;&#x2F;code&gt; type, but the interval gap is 2&#x2F;4&#x2F;6&#x2F;12-hour&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;rem&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;reminder of an Int-like types&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;NOTE&lt;&#x2F;p&gt;
&lt;p&gt;For more performance-ergonomic, all no-nullable types (this is the default case) in the &lt;code&gt;CREATE TABLE&lt;&#x2F;code&gt; statement has a default value: empty string for String, 0 for int-like and float-like, false for boolean, and unix epoch timestamp 0 (ISO 8601: 1970-01-01T00:00:00Z) for Date and DateTime. It is allow to use &lt;code&gt;default&lt;&#x2F;code&gt; constraint to change the default value if necessary. See more for &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;performance#Data_Type&quot;&gt;performance tunning&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;show databases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;SHOW DATABASES
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;show tables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;SHOW TABLES IN db_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;show create table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;SHOW &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span&gt;[db_name.]table_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;desc table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DESC&lt;&#x2F;span&gt;&lt;span&gt; TABLE [db_name.]table_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;drop database &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DROP DATABASE&lt;&#x2F;span&gt;&lt;span&gt; IF EXISTS db_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;drop table&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DROP TABLE&lt;&#x2F;span&gt;&lt;span&gt; IF EXISTS [db_name.]table_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;truncate table &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;TRUNCATE&lt;&#x2F;span&gt;&lt;span&gt; TABLE IF EXISTS [db_name.]table_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;insert into&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;INSERT INTO&lt;&#x2F;span&gt;&lt;span&gt; [db_name.]table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt; (v11, v12, v13), (v21, v22, v23), ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;use database&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;USE db_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;query&quot;&gt;Query&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;general form&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; expr_list
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; [db.]table]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; PARTS range_list&#x2F;last_subclause]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; expr]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;GROUP BY&lt;&#x2F;span&gt;&lt;span&gt; expr_list]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ORDER BY&lt;&#x2F;span&gt;&lt;span&gt; expr_list]
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LIMIT&lt;&#x2F;span&gt;&lt;span&gt; n]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Note&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;WHERE PARTS clause&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;This clause is an unique JoinBase extension to the standard SQL, related to the core concept of JoinBase - &lt;a href=&quot;&#x2F;docs&#x2F;references&#x2F;concept#partition&quot;&gt;&lt;code&gt;Partition&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;br&#x2F;&gt; &lt;br&#x2F;&gt; This clause allows the user to explicitly specify the query partitions to reduce scanning dataset and accelerate query. *&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Select clause&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;select count(1) from table&lt;&#x2F;code&gt; is not currently supported. You can use &lt;code&gt;select count(some_column) from table&lt;&#x2F;code&gt; as the workaround.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;Currently, WHERE PARTS supports two subclause forms:
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;range_list&lt;&#x2F;code&gt;. The &lt;code&gt;range_list&lt;&#x2F;code&gt; consists of one or more comma separated &lt;code&gt;range&lt;&#x2F;code&gt;s. A &lt;code&gt;range&lt;&#x2F;code&gt; is one of as follow:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;one number, like 123;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;half open number interval, start..end, start..end contains all values with start &amp;lt;= x &amp;lt; end, like 123..456;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;close number interval, start..=end, start..=end contains all values with start &amp;lt;= x &amp;lt;= end, like 123..=456;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;last_subclause&lt;&#x2F;code&gt;. The &lt;code&gt;last_subclause&lt;&#x2F;code&gt; is used to specify the last number of partitions which you can query against without providing latest partition key because it is varying with time, like &lt;code&gt;last&lt;&#x2F;code&gt; or &lt;code&gt;last 10&lt;&#x2F;code&gt;. This form is very useful for querying latest data in the time based partitions. Note, &lt;code&gt;last&lt;&#x2F;code&gt; is just a short form to &lt;code&gt;last 1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;function-reference&quot;&gt;Function Reference&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;aggregation&quot;&gt;Aggregation&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;count, max, min, avg, sum, all, any&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;aggregation functions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;aggregation&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;math&quot;&gt;Math&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;abs, power, floor, ceil, ln, log10, log2, cos, acos, sin, asin, tan, atan&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;math related functions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;primitive&quot;&gt;Primitive&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;int32, int64, uint32, uint64, float32, float64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;explicit prompt other compatible types into this type&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;string&quot;&gt;String&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;utf8_is_alpha, utf8_is_decimal, utf8_is_digit, utf8_is_lower, utf8_is_upper, utf8_is_numeric, utf8_is_space, string_is_ascii&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;testing functions for String&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;utf8_length, utf8_capitalize, utf8_lower, utf8_upper, utf8_reverse, utf8_ltrim, utf8_rtrim, utf8_trim, starts_with, ends_with, find_substring, count_substring&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;String related functions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;blob-binary&quot;&gt;Blob(Binary)&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;binary_length, find_substring&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;Blob(Binary) related functions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;datetime&quot;&gt;DateTime&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;yyyy&#x2F;year,yyyymm,ymd&#x2F;date,ymdh,ymdhm,ymdhms,&lt;&#x2F;br&gt;month,weekday,day,hour,minute,second&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;DateTime related functions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;other-test&quot;&gt;Other Test&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;Item&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;Detail&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Function Name&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;is_finite, is_inf, is_nan&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Description&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;test functions for Floats&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;Type&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;scalar&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
</feed>
